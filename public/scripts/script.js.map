{"version":3,"file":"script.js","mappings":"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","sources":["webpack:///./src/checkbox.ts","webpack:///./src/event.ts","webpack:///./src/graph.ts","webpack:///./src/index.ts","webpack:///./src/link.ts","webpack:///./src/node.ts","webpack:///./src/nodedefinitions.ts","webpack:///./src/pin.ts","webpack:///./src/util.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["export class CheckBox {\r\n    private checked: boolean;\r\n\r\n    element: HTMLDivElement;\r\n\r\n    constructor() {\r\n        this.element = document.createElement(\"div\");\r\n        this.element.classList.add(\"checkbox\");\r\n        const tick: HTMLSpanElement = document.createElement(\"span\");\r\n        tick.classList.add(\"material-symbols-rounded\");\r\n        tick.innerHTML = \"check\";\r\n        this.element.appendChild(tick);\r\n        this.element.addEventListener(\"click\", () => this.setChecked(!this.checked));\r\n    }\r\n\r\n    setChecked(checked: boolean) {\r\n        this.checked = checked;\r\n        this.element.setAttribute(\"checked\", `${this.checked}`);\r\n    }\r\n}","export interface ILiteEvent<T> {\r\n    addListener(handler: { (data?: T): void }) : void;\r\n    removeListener(handler: { (data?: T): void }) : void;\r\n}\r\n\r\nexport class LiteEvent<T> implements ILiteEvent<T> {\r\n    private handlers: { (data?: T): void; }[] = [];\r\n\r\n    public addListener(handler: { (data?: T): void }): void {\r\n        this.handlers.push(handler);\r\n    }\r\n\r\n    public removeListener(handler: { (data?: T): void }): void {\r\n        this.handlers = this.handlers.filter(h => h !== handler);\r\n    }\r\n\r\n    public dispatch(data?: T): void {\r\n        this.handlers.slice(0).forEach(h => h(data));\r\n    }\r\n\r\n    public expose() : ILiteEvent<T> {\r\n        return this;\r\n    }\r\n}","import { Pin, PinType } from \"./pin\";\r\nimport { Node } from \"./node\";\r\nimport { Link } from \"./link\";\r\nimport { Point, getTranslation, setTranslation } from \"./util\";\r\n\r\nexport class Graph {\r\n    viewport: HTMLElement;\r\n    graphArea: HTMLElement;\r\n    nodes: Array<Node> = [];\r\n    \r\n    private dragCursorBegin: Point;\r\n    private dragTargetBegin: Point;\r\n    \r\n    private panning: boolean = false;\r\n    private dragging: boolean = false;\r\n\r\n    private dragNode: Node = null;\r\n    \r\n    private linking: boolean = false;\r\n    private linkPin: Pin = null;\r\n    private drawingLink: Link;\r\n\r\n    constructor() {\r\n        this.viewport = document.getElementById(\"graph-viewport\");\r\n        this.graphArea = document.getElementById(\"graph-area\");\r\n        this.drawingLink = new Link();\r\n        this.drawingLink.reset();\r\n        this.viewport.addEventListener(\"mousedown\", event => this.onMouseDown(event));\r\n        this.viewport.addEventListener(\"mousemove\", event => this.onMouseMove(event));\r\n        this.viewport.addEventListener(\"mouseup\", event => this.onMouseUp(event));\r\n        this.viewport.addEventListener(\"contextmenu\", event => this.onContextMenu(event));\r\n    }\r\n\r\n    private onMouseDown(event: MouseEvent): void {\r\n        if(event.button == 0)\r\n            document.getElementById(\"node-menu\").classList.remove(\"visible\");\r\n\r\n        if(event.button == 1 && !this.dragging && !this.linking) {\r\n            this.dragTargetBegin = getTranslation(this.graphArea);\r\n            this.dragCursorBegin = new Point(event.clientX, event.clientY);\r\n            this.panning = true;\r\n        }\r\n    }\r\n\r\n    private onMouseMove(event: MouseEvent): void {\r\n        if(this.panning) {\r\n            let position: Point = new Point(\r\n                this.dragTargetBegin.x + event.clientX - this.dragCursorBegin.x,\r\n                this.dragTargetBegin.y + event.clientY - this.dragCursorBegin.y\r\n            );\r\n            setTranslation(this.graphArea, position);\r\n        }\r\n\r\n        if(this.dragging) {\r\n            let position: Point = new Point(\r\n                this.dragTargetBegin.x + event.clientX - this.dragCursorBegin.x,\r\n                this.dragTargetBegin.y + event.clientY - this.dragCursorBegin.y\r\n            );\r\n            this.dragNode.setPosition(position);\r\n        }\r\n    \r\n        if(this.linking) {\r\n            const areaRect: DOMRect = this.graphArea.getBoundingClientRect();\r\n            const position: Point = new Point(event.clientX - areaRect.left, event.clientY - areaRect.top);\r\n            switch(this.linkPin.getType()) {\r\n                case PinType.Output:\r\n                    this.drawingLink.setEndPoint(position);\r\n                    break;\r\n                case PinType.Input:\r\n                    this.drawingLink.setStartPoint(position);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onMouseUp(event: MouseEvent): void {\r\n        if(this.panning) {\r\n            this.panning = false;\r\n        }\r\n        \r\n        if(this.dragging) {\r\n            this.dragNode.element.style.cursor = null;\r\n            this.dragNode = null;\r\n            this.dragging = false;\r\n        }\r\n\r\n        if(this.linking) {\r\n            this.drawingLink.reset();\r\n            this.linking = false;\r\n        }\r\n    }\r\n\r\n    private onContextMenu(event: MouseEvent): void {\r\n        event.preventDefault();\r\n        const viewportRect: DOMRect = this.viewport.getBoundingClientRect();\r\n        const nodeMenu: HTMLElement = document.getElementById(\"node-menu\");\r\n        const nodeMenuRect: DOMRect = nodeMenu.getBoundingClientRect();\r\n        const alignRight = event.clientX > viewportRect.width / 2;\r\n        nodeMenu.style.left = `${event.clientX - viewportRect.x - (alignRight ? nodeMenuRect.width : 0)}px`;\r\n        nodeMenu.style.top = `${event.clientY - viewportRect.y}px`;\r\n        nodeMenu.classList.add(\"visible\");\r\n\r\n        const searchbar: HTMLInputElement = <HTMLInputElement>document.getElementById(\"node-search-bar\");\r\n        searchbar.value = \"\";\r\n        searchbar.focus();\r\n    }\r\n\r\n    beginDrag(node: Node, position: Point): void {\r\n        if(this.panning || this.linking)\r\n            return;\r\n\r\n        this.dragNode = node;\r\n        this.dragNode.element.style.cursor = \"grabbing\";\r\n        this.dragCursorBegin = position;\r\n        this.dragTargetBegin = this.dragNode.getPosition();\r\n        this.dragging = true;\r\n    }\r\n\r\n    beginLink(pin: Pin): void {\r\n        if(this.panning || this.dragging)\r\n            return;\r\n\r\n        this.linkPin = pin;\r\n        this.linking = true;\r\n\r\n        const position: Point = this.linkPin.getPosition();\r\n        this.drawingLink.setPoints(position, position);\r\n    }\r\n\r\n    endLink(pin: Pin): void {\r\n        if(this.linkPin != pin\r\n            && this.linkPin.getType() != pin.getType()          \r\n            && this.linkPin.getNode() != pin.getNode()\r\n            && this.linkPin.getValueType() == pin.getValueType()) {\r\n            let link: Link;\r\n            switch(this.linkPin.getType()) {\r\n                case PinType.Output:\r\n                    link = new Link(this.linkPin, pin);\r\n                    break;\r\n                case PinType.Input:\r\n                    link = new Link(pin, this.linkPin);\r\n                    break;\r\n            }                \r\n            this.linkPin.addLink(link);\r\n            pin.addLink(link);\r\n        }\r\n        this.drawingLink.reset();\r\n        this.linking = false;\r\n    }\r\n\r\n    viewportToAreaPoint(point: Point): Point {\r\n        const areaPos = getTranslation(this.graphArea);\r\n        return point.subtract(areaPos.x, areaPos.y);\r\n    }\r\n}\r\n","let nodes = [\r\n    {\r\n        id: 0,\r\n        type: \"start\",\r\n        posX: 32,\r\n        posY: 32,\r\n        inLinks: [],\r\n        outLinks: [{node: 1, index: 0}]\r\n    },\r\n    {\r\n        id: 1,\r\n        type: \"add\",\r\n        posX: 160,\r\n        posY: 32,\r\n        inLinks: [{node: 0, index: 0}, {node: null}],\r\n        outLinks: [{node: null}]\r\n    },\r\n    {\r\n        id: 2,\r\n        type: \"if\",\r\n        posX: 288,\r\n        posY: 32,\r\n        inLinks: [],\r\n        outLinks: []\r\n    }\r\n];\r\n\r\nimport { Graph } from \"./graph\";\r\nimport { Node } from \"./node\";\r\nimport { nodeDefinitions } from \"./nodedefinitions\";\r\nimport { Point, getTopLeft } from \"./util\";\r\n\r\n// Generate graph\r\nconst graph: Graph = new Graph();\r\n\r\nfor (let i = 0; i < nodes.length; i++) {\r\n    const nodeData = nodes[i];\r\n    graph.nodes.push(new Node(graph, nodeData.type, new Point(nodeData.posX, nodeData.posY)));\r\n}\r\n\r\n// Generate add node menu items\r\nfunction addTreeViewBranch(parent: HTMLUListElement, label: string): HTMLUListElement {\r\n    const branchElement: HTMLLIElement = document.createElement(\"li\");\r\n    branchElement.classList.add(\"branch\");\r\n    branchElement.addEventListener(\"click\", () => branchElement.classList.toggle(\"expanded\"));\r\n    \r\n    const rowElement: HTMLDivElement = document.createElement(\"div\");\r\n    const arrowElement: HTMLSpanElement = document.createElement(\"span\");\r\n    arrowElement.classList.add(\"material-symbols-rounded\");\r\n    rowElement.appendChild(arrowElement);\r\n    const labelElement: HTMLSpanElement = document.createElement(\"span\");\r\n    labelElement.textContent = label;\r\n    rowElement.appendChild(labelElement);\r\n    branchElement.appendChild(rowElement);\r\n    \r\n    const childList: HTMLUListElement = document.createElement(\"ul\");\r\n    branchElement.appendChild(childList);\r\n    \r\n    parent.appendChild(branchElement);\r\n    return childList;\r\n}\r\n\r\nfunction addTreeViewListItem(parent: HTMLUListElement, label: string): HTMLLIElement {\r\n    const itemElement: HTMLLIElement = document.createElement(\"li\");\r\n    itemElement.classList.add(\"branch\");\r\n    \r\n    const rowElement: HTMLDivElement = document.createElement(\"div\");\r\n    const labelElement: HTMLSpanElement = document.createElement(\"span\");\r\n    labelElement.textContent = label;\r\n    rowElement.appendChild(labelElement);\r\n    itemElement.appendChild(rowElement);\r\n    \r\n    parent.appendChild(itemElement);\r\n    return itemElement;\r\n}\r\n\r\nconst nodeMenu: HTMLElement = document.getElementById(\"node-menu\");\r\nnodeMenu.addEventListener(\"mousedown\", event => {\r\n    if(event.button == 0)\r\n        event.stopPropagation();\r\n});\r\nconst nodeTreeView: HTMLUListElement = <HTMLUListElement>document.getElementById(\"node-tree-view\");\r\nconst categoryLists = {};\r\n\r\nfor (let key in nodeDefinitions) {\r\n    const definition = nodeDefinitions[key];\r\n    if(!(definition.category in categoryLists))\r\n        categoryLists[definition.category] = addTreeViewBranch(nodeTreeView, definition.category);\r\n    \r\n    const listItem: HTMLLIElement = addTreeViewListItem(categoryLists[definition.category], definition.name);\r\n    listItem.addEventListener(\"click\", event => {\r\n        if(event.button == 0) {\r\n            event.stopPropagation();\r\n            const nodePosition = graph.viewportToAreaPoint(getTopLeft(nodeMenu));\r\n            graph.nodes.push(new Node(graph, key, nodePosition));\r\n            nodeMenu.classList.remove(\"visible\");\r\n        }\r\n    });\r\n}\r\n","import { Pin } from \"./pin\";\r\nimport { Point, Rect, setTranslation } from \"./util\";\r\n\r\nexport class Link {\r\n    static readonly curve : number = 32;\r\n\r\n    private startPoint: Point;\r\n    private endPoint: Point;\r\n    private element: SVGElement;\r\n    private path: SVGPathElement;\r\n    private startPin: Pin;\r\n    private endPin: Pin;\r\n\r\n    constructor(startPin?: Pin, endPin?: Pin) {      \r\n        if(startPin != undefined && startPin != null) {\r\n            this.startPin = startPin;\r\n            this.startPoint = startPin.getPosition();\r\n        }\r\n        else {\r\n            this.startPin = null;\r\n            this.startPoint = new Point();\r\n        }\r\n\r\n        if(endPin != undefined && endPin != null) {\r\n            this.endPin = endPin;\r\n            this.endPoint = endPin.getPosition();\r\n        }\r\n        else {\r\n            this.endPin = null;\r\n            this.endPoint = new Point();\r\n        }\r\n        this.element = <SVGElement>document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n        this.element.classList.add(\"graph-link\");\r\n        this.path = <SVGPathElement>document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n        this.element.appendChild(this.path);\r\n        const graphLinks: HTMLElement = document.getElementById(\"graph-links\");\r\n        graphLinks.appendChild(this.element);\r\n        this.updatePath();\r\n    }\r\n\r\n    setStartPoint(startPoint: Point): void {\r\n        this.startPoint = startPoint;\r\n        this.updatePath();\r\n    }\r\n\r\n    setEndPoint(endPoint: Point): void {\r\n        this.endPoint = endPoint;\r\n        this.updatePath();\r\n    }\r\n\r\n    setPoints(startPoint: Point, endPoint: Point): void {\r\n        this.startPoint = startPoint;\r\n        this.endPoint = endPoint;\r\n        this.updatePath();\r\n    }\r\n\r\n    reset(): void {\r\n        this.startPoint = new Point(0, 0);\r\n        this.endPoint = new Point(0, 0);\r\n        this.path.setAttribute(\"d\", \"\");\r\n    }\r\n\r\n    destroy(): void {\r\n        this.path.parentElement.removeChild(this.path);\r\n        this.startPin.breakLink(this);\r\n        this.endPin.breakLink(this);\r\n    }\r\n\r\n    private updatePath(): void {\r\n        const startControlX: number = this.startPoint.x + Link.curve;\r\n        const endControlX: number = this.endPoint.x - Link.curve;\r\n\r\n        const newBounds: Rect = new Rect();\r\n\r\n        const s: Point = new Point();\r\n        const e: Point = new Point();\r\n\r\n        if(this.startPoint.x <= endControlX) {\r\n            newBounds.x = this.startPoint.x;\r\n            newBounds.width = this.endPoint.x - this.startPoint.x;\r\n            e.x = newBounds.width;\r\n        }\r\n        else {\r\n            newBounds.x = endControlX;\r\n            newBounds.width = startControlX - endControlX;\r\n            s.x = this.startPoint.x - endControlX;\r\n            e.x = Link.curve;\r\n        }\r\n\r\n        if(this.startPoint.y <= this.endPoint.y) {\r\n            newBounds.y = this.startPoint.y - 2;\r\n            newBounds.height = this.endPoint.y - this.startPoint.y + 4;\r\n            s.y = 2;\r\n            e.y = newBounds.height - 2;\r\n        }\r\n        else {\r\n            newBounds.y = this.endPoint.y - 2;\r\n            newBounds.height = this.startPoint.y - this.endPoint.y + 4;\r\n            s.y = newBounds.height - 2;\r\n            e.y = 2;\r\n        }\r\n\r\n        setTranslation(this.element, new Point(newBounds.x, newBounds.y));\r\n        this.element.setAttribute(\"width\", `${newBounds.width}`);\r\n        this.element.setAttribute(\"height\", `${newBounds.height}`)\r\n        \r\n        this.path.setAttribute(\"d\", `M ${s.x} ${s.y} C ${s.x + Link.curve} ${s.y}, ${e.x - Link.curve} ${e.y}, ${e.x} ${e.y}`);\r\n    }\r\n}","import { Graph } from \"./graph\";\r\nimport { Pin, PinType, ValueType } from \"./pin\";\r\nimport { nodeDefinitions } from \"./nodedefinitions\";\r\nimport { CheckBox } from \"./checkbox\";\r\nimport { Point, getTranslation, setTranslation } from \"./util\";\r\n\r\nexport class Node {\r\n    private static currentID = 0;\r\n\r\n    private id: number;\r\n\r\n    // UI Elements\r\n    element : HTMLDivElement;\r\n    private inputs: Array<Pin> = [];\r\n    private outputs: Array<Pin> = [];\r\n\r\n    private graph: Graph;\r\n\r\n    constructor(graph: Graph, type: string, position: Point) {\r\n        this.id = Node.currentID++;\r\n        this.graph = graph;\r\n\r\n        const nodeDefinition = nodeDefinitions[type];\r\n    \r\n        // Node\r\n        this.element = document.createElement(\"div\");\r\n        this.element.addEventListener(\"mousedown\", event => this.onMouseDown(event));\r\n        this.element.classList.add(\"graph-node\");\r\n    \r\n        // Head\r\n        const head: HTMLDivElement = document.createElement(\"div\");\r\n        head.classList.add(\"head\");\r\n        const title: HTMLSpanElement = document.createElement(\"span\");\r\n        title.innerHTML = nodeDefinition.name;\r\n        head.appendChild(title);\r\n        this.element.appendChild(head);\r\n\r\n        // Body\r\n        const body: HTMLDivElement = document.createElement(\"div\");\r\n        body.classList.add(\"body\");\r\n        this.element.appendChild(body);\r\n    \r\n        // Rows\r\n        let rows = Math.max(nodeDefinition.inputs.length, nodeDefinition.outputs.length);\r\n        for (let i = 0; i < rows; i++) {\r\n            const row: number = i + 1;\r\n\r\n            if(i < nodeDefinition.inputs.length) {\r\n                const input = nodeDefinition.inputs[i];\r\n                const valueType: ValueType = stringToValueType(input.type);\r\n\r\n                let inputPin: Pin = new Pin(this.graph, this, valueType, PinType.Input);\r\n                inputPin.element.style.gridColumn = \"1\";\r\n                inputPin.element.style.gridRow = row.toString();\r\n                this.inputs.push(inputPin);\r\n                body.appendChild(inputPin.element);\r\n                \r\n                const inputLabel: HTMLSpanElement = document.createElement(\"span\");\r\n                inputLabel.innerHTML = input.name;\r\n                inputLabel.style.gridColumn = \"2\";\r\n                inputLabel.style.gridRow = row.toString();\r\n                body.appendChild(inputLabel);\r\n                \r\n                if(valueType & (ValueType.Int | ValueType.Float | ValueType.String)) {\r\n                    const inputField: HTMLSpanElement = document.createElement(\"span\");\r\n                    inputField.classList.add(\"input\");\r\n                    inputField.setAttribute(\"role\", \"textbox\");\r\n                    inputField.setAttribute(\"contenteditable\", \"true\");\r\n                    inputField.style.gridColumn = \"3\";\r\n                    inputField.style.gridRow = row.toString();\r\n                    body.appendChild(inputField);\r\n\r\n                    inputPin.onLinksChanged.addListener((linkCount: number) => {\r\n                        inputField.style.visibility = linkCount > 0 ? \"hidden\" : \"visible\";\r\n                    });\r\n                }\r\n                else if(valueType == ValueType.Boolean) {\r\n                    const inputCheck: CheckBox = new CheckBox();\r\n                    inputCheck.element.style.gridColumn = \"3\";\r\n                    inputCheck.element.style.gridRow = row.toString();\r\n                    body.appendChild(inputCheck.element);\r\n\r\n                    inputPin.onLinksChanged.addListener((linkCount: number) => {\r\n                        inputCheck.element.style.visibility = linkCount > 0 ? \"hidden\" : \"visible\";\r\n                    });\r\n                }\r\n                /* Enum\r\n                else if(valueType == ValueType.Boolean) {\r\n                    const inputSelect: HTMLSelectElement = document.createElement(\"select\");\r\n                    const trueOption = document.createElement(\"option\");\r\n                    trueOption.innerHTML = \"True\";\r\n                    inputSelect.options.add(trueOption);\r\n                    const falseOption = document.createElement(\"option\");\r\n                    falseOption.innerHTML = \"False\";\r\n                    inputSelect.options.add(falseOption);\r\n                    inputSelect.style.gridColumn = \"3\";\r\n                    inputSelect.style.gridRow = row.toString();\r\n                    body.appendChild(inputSelect);\r\n\r\n                    inputPin.onLinksChanged.addListener((linkCount: number) => {\r\n                        inputSelect.style.visibility = linkCount > 0 ? \"hidden\" : \"visible\";\r\n                    });\r\n                }*/\r\n            }\r\n    \r\n            if(i < nodeDefinition.outputs.length) {\r\n                const output = nodeDefinition.outputs[i];\r\n                const valueType: ValueType = stringToValueType(output.type);\r\n\r\n                const outputLabel: HTMLSpanElement = document.createElement(\"span\");\r\n                outputLabel.classList.add(\"text-right\");\r\n                outputLabel.innerHTML = output.name;\r\n                outputLabel.style.gridColumn = \"5\";\r\n                outputLabel.style.gridRow = row.toString();\r\n                body.appendChild(outputLabel);\r\n\r\n                const outputPin = new Pin(this.graph, this, valueType);\r\n                outputPin.element.style.gridColumn = \"6\";\r\n                outputPin.element.style.gridRow = row.toString();\r\n                this.outputs.push(outputPin);\r\n                body.appendChild(outputPin.element);\r\n            }\r\n        }\r\n        const graphNodes = document.getElementById(\"graph-nodes\");\r\n        graphNodes.appendChild(this.element);\r\n\r\n        this.setPosition(position);\r\n    }\r\n\r\n    getPosition(): Point {\r\n        return getTranslation(this.element);\r\n    }\r\n\r\n    setPosition(position: Point): void {\r\n        setTranslation(this.element, position);\r\n        this.inputs.forEach(input => input.updateLinkPositions());\r\n        this.outputs.forEach(output => output.updateLinkPositions());\r\n    }\r\n\r\n    private onMouseDown(event: MouseEvent): void {\r\n        if(!(<Element>event.target).classList.contains(\"graph-node\"))\r\n            return; \r\n        \r\n        if(event.button == 0) {\r\n            event.preventDefault();\r\n\r\n            const position: Point = new Point(event.clientX, event.clientY);\r\n            this.graph.beginDrag(this, position);\r\n        }\r\n    }\r\n}\r\n\r\nfunction stringToValueType(valueType: string): ValueType {\r\n    switch(valueType) {\r\n        case \"Flow\": return ValueType.Flow;\r\n        case \"Int\": return ValueType.Int;\r\n        case \"Float\": return ValueType.Float;\r\n        case \"String\": return ValueType.String;\r\n        case \"Boolean\": return ValueType.Boolean;\r\n        default: return ValueType.Flow;\r\n    }\r\n}","export const nodeDefinitions = {\r\n    start: {\r\n        name: \"Start\",\r\n        category: \"Flow\",\r\n        inputs: [],\r\n        outputs: [{name: \"\", type: \"Flow\"}]\r\n    },\r\n    if: {\r\n        name: \"If\",\r\n        category: \"Flow\",\r\n        inputs: [{ name: \"\", type: \"Flow\"}, { name: \"Condition\", type: \"Boolean\"}],\r\n        outputs: [{ name: \"True\", type: \"Flow\"}, { name: \"False\", type: \"Flow\"}]\r\n    },\r\n    add: {\r\n        name: \"Add\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n    subtract: {\r\n        name: \"Subtract\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n    multipy: {\r\n        name: \"Multiply\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n    divide: {\r\n        name: \"Divide\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n};","import { Link } from \"./link\";\r\nimport { Graph } from \"./graph\";\r\nimport { Node } from \"./node\";\r\nimport { ILiteEvent, LiteEvent } from \"./event\";\r\nimport { Point } from \"./util\";\r\n\r\nexport enum PinType {\r\n    Output,\r\n    Input\r\n}\r\n\r\nexport enum ValueType {\r\n    Flow = 1,\r\n    Int = 2,\r\n    Float = 4,\r\n    String = 8,\r\n    Boolean = 16\r\n}\r\n\r\nexport class Pin {\r\n    private type: PinType = PinType.Output;\r\n    private valueType: ValueType;\r\n    private links: Array<Link> = [];\r\n\r\n    private graph: Graph;\r\n    private node: Node;\r\n\r\n    public element: HTMLDivElement;\r\n    private graphic: HTMLDivElement;\r\n\r\n    private readonly linksChangedEvent = new LiteEvent<number>();\r\n\r\n    constructor(graph: Graph, node: Node, valueType: ValueType, type: PinType = PinType.Output) {\r\n        this.graph = graph;\r\n        this.node = node;\r\n        this.type = type;\r\n        this.valueType = valueType;\r\n\r\n        this.element = document.createElement(\"div\");\r\n        this.element.classList.add(\"pin\");\r\n        if(this.type == PinType.Output)\r\n            this.element.classList.add(\"right\");\r\n\r\n        this.element.addEventListener(\"mousedown\", event => this.onMouseDown(event));\r\n        this.element.addEventListener(\"mouseup\", event => this.onMouseUp(event));\r\n        this.element.addEventListener(\"mouseenter\", event => this.onMouseEnter(event));\r\n        this.element.addEventListener(\"mouseleave\", event => this.onMouseExit(event))\r\n        this.element.addEventListener(\"contextmenu\", event => event.preventDefault());\r\n\r\n        this.graphic = document.createElement(\"div\");\r\n        this.graphic.classList.add(\"pin-graphic\");\r\n        switch(this.valueType) {\r\n            case ValueType.Flow: this.graphic.classList.add(\"type-flow\"); break;\r\n            case ValueType.Int: this.graphic.classList.add(\"type-int\"); break;\r\n            case ValueType.Float: this.graphic.classList.add(\"type-float\"); break;\r\n            case ValueType.String: this.graphic.classList.add(\"type-string\"); break;\r\n            case ValueType.Boolean: this.graphic.classList.add(\"type-boolean\"); break;\r\n        }\r\n\r\n        this.element.appendChild(this.graphic);\r\n    }\r\n\r\n    getType(): PinType { return this.type; }\r\n    getValueType(): ValueType { return this.valueType; }\r\n    getNode(): Node { return this.node; }\r\n\r\n    get onLinksChanged(): ILiteEvent<number> { return this.linksChangedEvent.expose(); }\r\n\r\n    getPosition(): Point {\r\n        const graphRect: DOMRect = this.graph.graphArea.getBoundingClientRect();\r\n        const pinRect: DOMRect = this.element.getBoundingClientRect();\r\n        return new Point(\r\n            pinRect.left + pinRect.width / 2 - graphRect.left,\r\n            pinRect.top + pinRect.height / 2 - graphRect.top);\r\n    }\r\n\r\n    addLink(link: Link): void {\r\n        this.links.push(link);\r\n        this.setGraphicSolid(true);\r\n        this.linksChangedEvent.dispatch(this.links.length);\r\n    }\r\n\r\n    breakLink(link: Link): void {\r\n        let index: number = this.links.indexOf(link);\r\n        if(index > -1)\r\n            this.links.splice(index, 1);\r\n        if(this.links.length <= 0)\r\n            this.setGraphicSolid(false);\r\n        this.linksChangedEvent.dispatch(this.links.length);\r\n    }\r\n\r\n    private setGraphicSolid(solid: boolean): void {\r\n        if(solid)\r\n            this.element.classList.add(\"solid\");\r\n        else\r\n            this.element.classList.remove(\"solid\");\r\n    }\r\n\r\n    private onMouseDown(event: MouseEvent): void {\r\n        if(!(<Element>event.target).classList.contains(\"pin\"))\r\n            return;\r\n\r\n        if(event.button == 0) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this.graph.beginLink(this);\r\n        }\r\n        else if(event.button == 2) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            const linkCount: number = this.links.length;\r\n            for (let i = 0; i < linkCount; i++)\r\n                this.links[0].destroy();     \r\n        }\r\n    }\r\n\r\n    private onMouseUp(event: MouseEvent): void {\r\n        if(!(<Element>event.target).classList.contains(\"pin\"))\r\n            return;\r\n\r\n        if(event.button == 0)\r\n            this.graph.endLink(this);\r\n    }\r\n\r\n    private onMouseEnter(event: MouseEvent): void {\r\n        this.setGraphicSolid(true);\r\n    }\r\n\r\n    private onMouseExit(event: MouseEvent): void {\r\n        if(this.links.length <= 0)\r\n            this.setGraphicSolid(false);\r\n    }\r\n\r\n    updateLinkPositions(): void {\r\n        switch(this.type) {\r\n            case PinType.Output:\r\n                this.links.forEach(link => link.setStartPoint(this.getPosition()));\r\n                break;\r\n            case PinType.Input:\r\n                this.links.forEach(link => link.setEndPoint(this.getPosition()));\r\n                break;\r\n        }\r\n    }\r\n}","export class Point {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x?: number, y?: number) {\r\n        this.x = x ?? 0;\r\n        this.y = y ?? 0;\r\n    }\r\n\r\n    add(x: number, y: number): Point {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n    subtract(x: number, y: number): Point {\r\n        this.x -= x;\r\n        this.y -= y;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class Rect {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(x?: number, y?: number, width?: number, height?: number) {\r\n        this.x = x ?? 0;\r\n        this.y = y ?? 0;\r\n        this.width = width ?? 0;\r\n        this.height = height ?? 0;\r\n    }\r\n}\r\n\r\nfunction roundMultiple(value: number, multiple: number): number {\r\n    return Math.round(value / multiple) * multiple;\r\n}\r\n\r\nfunction ceilMultiple(value: number, multiple: number): number {\r\n    return Math.ceil(value / multiple) * multiple;\r\n}\r\n\r\nexport function getTranslation(element: HTMLElement): Point {\r\n    const style: CSSStyleDeclaration = window.getComputedStyle(element);\r\n    const matrix: DOMMatrixReadOnly = new DOMMatrixReadOnly(style.transform);\r\n    return new Point(matrix.m41, matrix.m42);\r\n}\r\n\r\nexport function getTopLeft(element: HTMLElement): Point {\r\n    return new Point(element.offsetLeft, element.offsetTop);\r\n}\r\n\r\nexport function setTranslation(element: HTMLElement | SVGElement, translation: Point): void {\r\n    element.style.transform = `translate(${translation.x}px, ${translation.y}px)`;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["this","element","document","createElement","classList","add","tick","innerHTML","appendChild","addEventListener","setChecked","checked","setAttribute","CheckBox","handlers","addListener","handler","push","removeListener","filter","h","dispatch","data","slice","forEach","expose","LiteEvent","nodes","panning","dragging","dragNode","linking","linkPin","viewport","getElementById","graphArea","drawingLink","Link","reset","event","onMouseDown","onMouseMove","onMouseUp","onContextMenu","button","remove","dragTargetBegin","getTranslation","dragCursorBegin","Point","clientX","clientY","position","x","y","setTranslation","setPosition","areaRect","getBoundingClientRect","left","top","getType","PinType","Output","setEndPoint","Input","setStartPoint","style","cursor","preventDefault","viewportRect","nodeMenu","nodeMenuRect","alignRight","width","searchbar","value","focus","beginDrag","node","getPosition","beginLink","pin","setPoints","endLink","getNode","getValueType","link","addLink","viewportToAreaPoint","point","areaPos","subtract","Graph","id","type","posX","posY","inLinks","outLinks","index","graph","i","length","nodeData","Node","stopPropagation","nodeTreeView","categoryLists","key","definition","nodeDefinitions","category","parent","label","branchElement","toggle","rowElement","arrowElement","labelElement","textContent","childList","addTreeViewBranch","itemElement","addTreeViewListItem","name","nodePosition","getTopLeft","startPin","endPin","undefined","startPoint","endPoint","createElementNS","path","updatePath","destroy","parentElement","removeChild","breakLink","startControlX","curve","endControlX","newBounds","Rect","s","e","height","inputs","outputs","currentID","nodeDefinition","head","title","body","rows","Math","max","row","input","valueType","stringToValueType","inputPin","Pin","gridColumn","gridRow","toString","inputLabel","ValueType","Int","Float","String","onLinksChanged","linkCount","visibility","Boolean","output","outputLabel","outputPin","updateLinkPositions","target","contains","Flow","start","if","multipy","divide","links","linksChangedEvent","onMouseEnter","onMouseExit","graphic","graphRect","pinRect","setGraphicSolid","indexOf","splice","solid","window","getComputedStyle","matrix","DOMMatrixReadOnly","transform","m41","m42","offsetLeft","offsetTop","translation","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}