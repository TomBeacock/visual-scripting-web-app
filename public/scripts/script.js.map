{"version":3,"file":"script.js","mappings":"4KAyCA,2BAAgCA,GAC5B,IAAMC,EAAwBC,SAASC,eAAe,aACtDF,EAASG,iBAAiB,aAAa,SAAAC,GAChB,GAAhBA,EAAMC,QACLD,EAAME,iBACd,IAEA,IAAMC,EAAmDN,SAASC,eAAe,kBAC3EM,EAAgB,CAAC,E,WAEdC,GACL,IAAMC,EAAa,EAAAC,gBAAgBF,GAC9BC,EAAWE,YAAYJ,IACxBA,EAAcE,EAAWE,UAhDrC,SAA2BC,EAA0BC,GACjD,IAAMC,EAA+Bd,SAASe,cAAc,MAC5DD,EAAcE,UAAUC,IAAI,UAC5BH,EAAcZ,iBAAiB,SAAS,WAAM,OAAAY,EAAcE,UAAUE,OAAO,WAA/B,IAE9C,IAAMC,EAA6BnB,SAASe,cAAc,OACpDK,EAAgCpB,SAASe,cAAc,QAC7DK,EAAaJ,UAAUC,IAAI,4BAC3BE,EAAWE,YAAYD,GACvB,IAAME,EAAgCtB,SAASe,cAAc,QAC7DO,EAAaC,YAAcV,EAC3BM,EAAWE,YAAYC,GACvBR,EAAcO,YAAYF,GAE1B,IAAMK,EAA8BxB,SAASe,cAAc,MAI3D,OAHAD,EAAcO,YAAYG,GAE1BZ,EAAOS,YAAYP,GACZU,CACX,CA6BiDC,CAAkBnB,EAAcG,EAAWE,WA3B5F,SAA6BC,EAA0BC,GACnD,IAAMa,EAA6B1B,SAASe,cAAc,MAC1DW,EAAYV,UAAUC,IAAI,UAE1B,IAAME,EAA6BnB,SAASe,cAAc,OACpDO,EAAgCtB,SAASe,cAAc,QAM7D,OALAO,EAAaC,YAAcV,EAC3BM,EAAWE,YAAYC,GACvBI,EAAYL,YAAYF,GAExBP,EAAOS,YAAYK,GACZA,CACX,CAiBwCC,CAAoBpB,EAAcE,EAAWE,UAAWF,EAAWmB,MAC1F1B,iBAAiB,SAAS,SAAAC,GAC/B,GAAmB,GAAhBA,EAAMC,OAAa,CAClBD,EAAME,kBACN,IAAMwB,EAAe/B,EAAMgC,qBAAoB,IAAAC,YAAWhC,IAC1DD,EAAMkC,MAAMC,KAAK,IAAI,EAAAC,KAAKpC,EAAOU,EAAKqB,IACtC9B,EAASiB,UAAUmB,OAAO,U,CAElC,G,EAbJ,IAAK,IAAI3B,KAAO,EAAAE,gB,EAAPF,EAeb,C,6JC7DA,8BACY,KAAA4B,SAAoC,EAiBhD,QAfW,YAAAC,YAAP,SAAmBC,GACfC,KAAKH,SAASH,KAAKK,EACvB,EAEO,YAAAE,eAAP,SAAsBF,GAClBC,KAAKH,SAAWG,KAAKH,SAASK,QAAO,SAAAC,GAAK,OAAAA,IAAMJ,CAAN,GAC9C,EAEO,YAAAK,SAAP,SAAgBC,GACZL,KAAKH,SAASS,MAAM,GAAGC,SAAQ,SAAAJ,GAAK,OAAAA,EAAEE,EAAF,GACxC,EAEO,YAAAG,OAAP,WACI,OAAOR,IACX,EACJ,EAlBA,GAAa,EAAAS,UAAAA,C,kMCAb,iBAiBI,wBAdA,KAAAhB,MAAqB,GAKb,KAAAiB,UAAoB,EACpB,KAAAC,WAAqB,EAErB,KAAAC,UAAkB,KAElB,KAAAC,UAAoB,EACpB,KAAAC,SAAgB,KAIpBd,KAAKe,SAAWtD,SAASC,eAAe,kBACxCsC,KAAKgB,UAAYvD,SAASC,eAAe,cACzCsC,KAAKiB,aAAe,IAAI,EAAAC,KACxBlB,KAAKiB,aAAaE,QAClBnB,KAAKe,SAASpD,iBAAiB,aAAa,SAAAC,GAAS,SAAKwD,YAAYxD,EAAjB,IACrDoC,KAAKe,SAASpD,iBAAiB,aAAa,SAAAC,GAAS,SAAKyD,YAAYzD,EAAjB,IACrDoC,KAAKe,SAASpD,iBAAiB,WAAW,SAAAC,GAAS,SAAK0D,UAAU1D,EAAf,IACnDoC,KAAKe,SAASpD,iBAAiB,eAAe,SAAAC,GAAS,SAAK2D,cAAc3D,EAAnB,GAC3D,CA2HJ,OAzHI,YAAA4D,UAAA,SAAUC,EAAYC,GACf1B,KAAKU,UAAYV,KAAKa,WAGzBb,KAAKY,UAAYa,EACjBzB,KAAKY,UAAUe,QAAQC,MAAMC,OAAS,WACtC7B,KAAK8B,iBAAmBJ,EACxB1B,KAAK+B,iBAAmB/B,KAAKY,UAAUc,SACvC1B,KAAKW,WAAY,EACrB,EAEA,YAAAqB,UAAA,SAAUC,GACN,IAAGjC,KAAKU,WAAYV,KAAKW,UAAzB,CAGAX,KAAKc,SAAWmB,EAChBjC,KAAKa,UAAW,EAEhB,IAAMa,EAAkB1B,KAAKc,SAASY,SACtC1B,KAAKiB,aAAaiB,UAAUR,EAAUA,EAN5B,CAOd,EAEA,YAAAS,QAAA,SAAQF,GACJ,GAAGjC,KAAKc,UAAYmB,GACbjC,KAAKc,SAASsB,MAAQH,EAAIG,MAC1BpC,KAAKc,SAASW,MAAQQ,EAAIR,MAC1BzB,KAAKc,SAASuB,WAAaJ,EAAII,UAAW,CAC7C,IAAIC,OAAI,EACR,OAAOtC,KAAKc,SAASsB,MACjB,KAAK,EAAAG,QAAQC,OACTF,EAAO,IAAI,EAAApB,KAAKlB,KAAKc,SAAUmB,GAC/B,MACJ,KAAK,EAAAM,QAAQE,MACTH,EAAO,IAAI,EAAApB,KAAKe,EAAKjC,KAAKc,UAGlCd,KAAKc,SAAS4B,QAAQJ,GACtBL,EAAIS,QAAQJ,E,CAEhBtC,KAAKiB,aAAaE,QAClBnB,KAAKa,UAAW,CACpB,EAEA,YAAAtB,oBAAA,SAAoBoD,GAChB,IAAMC,GAAU,IAAAC,gBAAe7C,KAAKgB,WACpC,OAAO2B,EAAMG,SAASF,EAAQG,EAAGH,EAAQI,EAC7C,EAEQ,YAAA5B,YAAR,SAAoBxD,GACG,GAAhBA,EAAMC,QACLJ,SAASC,eAAe,aAAae,UAAUmB,OAAO,WAEvC,GAAhBhC,EAAMC,QAAgBmC,KAAKW,WAAcX,KAAKa,WAC7Cb,KAAK+B,kBAAmB,IAAAc,gBAAe7C,KAAKgB,WAC5ChB,KAAK8B,iBAAmB,IAAI,EAAAmB,MAAMrF,EAAMsF,QAAStF,EAAMuF,SACvDnD,KAAKU,UAAW,EAExB,EAEQ,YAAAW,YAAR,SAAoBzD,GAChB,GAAGoC,KAAKU,SAAU,CACd,IAAIgB,EAAkB,IAAI,EAAAuB,MACtBjD,KAAK+B,iBAAiBgB,EAAInF,EAAMsF,QAAUlD,KAAK8B,iBAAiBiB,EAChE/C,KAAK+B,iBAAiBiB,EAAIpF,EAAMuF,QAAUnD,KAAK8B,iBAAiBkB,IAEpE,IAAAI,gBAAepD,KAAKgB,UAAWU,E,CAWnC,GARG1B,KAAKW,YACAe,EAAkB,IAAI,EAAAuB,MACtBjD,KAAK+B,iBAAiBgB,EAAInF,EAAMsF,QAAUlD,KAAK8B,iBAAiBiB,EAChE/C,KAAK+B,iBAAiBiB,EAAIpF,EAAMuF,QAAUnD,KAAK8B,iBAAiBkB,GAEpEhD,KAAKY,UAAUc,SAAWA,GAG3B1B,KAAKa,SAAU,CACd,IAAMwC,EAAoBrD,KAAKgB,UAAUsC,wBAEzC,OADM5B,EAAkB,IAAI,EAAAuB,MAAMrF,EAAMsF,QAAUG,EAASE,KAAM3F,EAAMuF,QAAUE,EAASG,KACnFxD,KAAKc,SAASsB,MACjB,KAAK,EAAAG,QAAQC,OACTxC,KAAKiB,aAAawC,SAAW/B,EAC7B,MACJ,KAAK,EAAAa,QAAQE,MACTzC,KAAKiB,aAAayC,WAAahC,E,CAI/C,EAEQ,YAAAJ,UAAR,SAAkB1D,GACXoC,KAAKU,WACJV,KAAKU,UAAW,GAGjBV,KAAKW,YACJX,KAAKY,UAAUe,QAAQC,MAAMC,OAAS,KACtC7B,KAAKY,UAAY,KACjBZ,KAAKW,WAAY,GAGlBX,KAAKa,WACJb,KAAKiB,aAAaE,QAClBnB,KAAKa,UAAW,EAExB,EAEQ,YAAAU,cAAR,SAAsB3D,GAClBA,EAAM+F,iBACN,IAAMC,EAAwB5D,KAAKe,SAASuC,wBACtC9F,EAAwBC,SAASC,eAAe,aAChDmG,EAAwBrG,EAAS8F,wBACjCQ,EAAalG,EAAMsF,QAAUU,EAAaG,MAAQ,EACxDvG,EAASoE,MAAM2B,KAAO,UAAG3F,EAAMsF,QAAUU,EAAab,GAAKe,EAAaD,EAAaE,MAAQ,GAAE,MAC/FvG,EAASoE,MAAM4B,IAAM,UAAG5F,EAAMuF,QAAUS,EAAaZ,EAAC,MACtDxF,EAASiB,UAAUC,IAAI,WAEvB,IAAMsF,EAAgDvG,SAASC,eAAe,mBAC9EsG,EAAUC,MAAQ,GAClBD,EAAUE,OACd,EACJ,EArJA,GAAa,EAAAC,MAAAA,C,gJCLb,IAAI1E,EAAQ,CACR,CACI2E,GAAI,EACJhC,KAAM,QACNiC,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,SAAU,CAAC,CAAC/C,KAAM,EAAGgD,MAAO,KAEhC,CACIL,GAAI,EACJhC,KAAM,MACNiC,KAAM,IACNC,KAAM,GACNC,QAAS,CAAC,CAAC9C,KAAM,EAAGgD,MAAO,GAAI,CAAChD,KAAM,OACtC+C,SAAU,CAAC,CAAC/C,KAAM,QAEtB,CACI2C,GAAI,EACJhC,KAAM,KACNiC,KAAM,IACNC,KAAM,GACNC,QAAS,GACTC,SAAU,KAUZjH,EAAe,IAAI,EAAA4G,OACzB,IAAAO,iBAAgBnH,GAGhB,IAAK,IAAIoH,EAAI,EAAGA,EAAIlF,EAAMmF,OAAQD,IAAK,CACnC,IAAME,EAAWpF,EAAMkF,GACvBpH,EAAMkC,MAAMC,KAAK,IAAI,EAAAC,KAAKpC,EAAOsH,EAASzC,KAAM,IAAI,EAAAa,MAAM4B,EAASR,KAAMQ,EAASP,O,kKCpCtF,iBAWI,WAAYQ,EAAgBC,GACTC,MAAZF,GAAqC,MAAZA,GACxB9E,KAAKiF,UAAYH,EACjB9E,KAAKkF,YAAcJ,EAASpD,WAG5B1B,KAAKiF,UAAY,KACjBjF,KAAKkF,YAAc,IAAI,EAAAjC,OAGd+B,MAAVD,GAAiC,MAAVA,GACtB/E,KAAKmF,QAAUJ,EACf/E,KAAKoF,UAAYL,EAAOrD,WAGxB1B,KAAKmF,QAAU,KACfnF,KAAKoF,UAAY,IAAI,EAAAnC,OAEzBjD,KAAKqF,SAAuB5H,SAAS6H,gBAAgB,6BAA8B,OACnFtF,KAAKqF,SAAS5G,UAAUC,IAAI,cAC5BsB,KAAKuF,MAAwB9H,SAAS6H,gBAAgB,6BAA8B,QACpFtF,KAAKqF,SAASvG,YAAYkB,KAAKuF,OACC9H,SAASC,eAAe,eAC7CoB,YAAYkB,KAAKqF,UAC5BrF,KAAKwF,YACT,CA8EJ,OA5EI,sBAAI,uBAAQ,C,IAAZ,WACI,OAAOxF,KAAKiF,SAChB,E,gCAEA,sBAAI,qBAAM,C,IAAV,WACI,OAAOjF,KAAKmF,OAChB,E,gCAEA,sBAAI,yBAAU,C,IAAd,SAAezB,GACX1D,KAAKkF,YAAcxB,EACnB1D,KAAKwF,YACT,E,gCAEA,sBAAI,uBAAQ,C,IAAZ,SAAa/B,GACTzD,KAAKoF,UAAY3B,EACjBzD,KAAKwF,YACT,E,gCAEA,YAAAtD,UAAA,SAAUwB,EAAmBD,GACzBzD,KAAKkF,YAAcxB,EACnB1D,KAAKoF,UAAY3B,EACjBzD,KAAKwF,YACT,EAEA,YAAArE,MAAA,WACInB,KAAKkF,YAAc,IAAI,EAAAjC,MAAM,EAAG,GAChCjD,KAAKoF,UAAY,IAAI,EAAAnC,MAAM,EAAG,GAC9BjD,KAAKuF,MAAME,aAAa,IAAK,GACjC,EAEA,YAAAC,QAAA,WACI1F,KAAKuF,MAAMI,cAAcC,YAAY5F,KAAKuF,OAC1CvF,KAAKiF,UAAUY,UAAU7F,MACzBA,KAAKmF,QAAQU,UAAU7F,KAC3B,EAEQ,YAAAwF,WAAR,WACI,IAAMM,EAAwB9F,KAAKkF,YAAYnC,EAAI7B,EAAK6E,MAClDC,EAAsBhG,KAAKoF,UAAUrC,EAAI7B,EAAK6E,MAE9CE,EAAkB,IAAI,EAAAC,KAEtBC,EAAW,IAAI,EAAAlD,MACfmD,EAAW,IAAI,EAAAnD,MAElBjD,KAAKkF,YAAYnC,GAAKiD,GACrBC,EAAUlD,EAAI/C,KAAKkF,YAAYnC,EAC/BkD,EAAUlC,MAAQ/D,KAAKoF,UAAUrC,EAAI/C,KAAKkF,YAAYnC,EACtDqD,EAAErD,EAAIkD,EAAUlC,QAGhBkC,EAAUlD,EAAIiD,EACdC,EAAUlC,MAAQ+B,EAAgBE,EAClCG,EAAEpD,EAAI/C,KAAKkF,YAAYnC,EAAIiD,EAC3BI,EAAErD,EAAI7B,EAAK6E,OAGZ/F,KAAKkF,YAAYlC,GAAKhD,KAAKoF,UAAUpC,GACpCiD,EAAUjD,EAAIhD,KAAKkF,YAAYlC,EAAI,EACnCiD,EAAUI,OAASrG,KAAKoF,UAAUpC,EAAIhD,KAAKkF,YAAYlC,EAAI,EAC3DmD,EAAEnD,EAAI,EACNoD,EAAEpD,EAAIiD,EAAUI,OAAS,IAGzBJ,EAAUjD,EAAIhD,KAAKoF,UAAUpC,EAAI,EACjCiD,EAAUI,OAASrG,KAAKkF,YAAYlC,EAAIhD,KAAKoF,UAAUpC,EAAI,EAC3DmD,EAAEnD,EAAIiD,EAAUI,OAAS,EACzBD,EAAEpD,EAAI,IAGV,IAAAI,gBAAepD,KAAKqF,SAAU,IAAI,EAAApC,MAAMgD,EAAUlD,EAAGkD,EAAUjD,IAC/DhD,KAAKqF,SAASI,aAAa,QAAS,UAAGQ,EAAUlC,QACjD/D,KAAKqF,SAASI,aAAa,SAAU,UAAGQ,EAAUI,SAElDrG,KAAKuF,MAAME,aAAa,IAAK,YAAKU,EAAEpD,EAAC,YAAIoD,EAAEnD,EAAC,cAAMmD,EAAEpD,EAAI7B,EAAK6E,MAAK,YAAII,EAAEnD,EAAC,aAAKoD,EAAErD,EAAI7B,EAAK6E,MAAK,YAAIK,EAAEpD,EAAC,aAAKoD,EAAErD,EAAC,YAAIqD,EAAEpD,GACvH,EAhHgB,EAAA+C,MAAiB,GAiHrC,C,CAlHA,GAAa,EAAA7E,KAAAA,C,mKCHA,EAAA/C,gBAAkB,CAE3BmI,MAAO,CACHjH,KAAM,QACNjB,SAAU,OACVmI,OAAQ,GACRC,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,UAE/BqE,GAAI,CACApH,KAAM,KACNjB,SAAU,OACVmI,OAAQ,CAAC,CAAElH,KAAM,GAAI+C,KAAM,QAAS,CAAE/C,KAAM,YAAa+C,KAAM,SAC/DoE,QAAS,CAAC,CAAEnH,KAAM,OAAQ+C,KAAM,QAAS,CAAE/C,KAAM,QAAS+C,KAAM,UAEpEsE,MAAO,CACHrH,KAAM,QACNjB,SAAU,OACVmI,OAAQ,CAAC,CAAElH,KAAM,GAAI+C,KAAM,QAAS,CAAE/C,KAAM,YAAa+C,KAAM,SAC/DoE,QAAS,CAAC,CAAEnH,KAAM,OAAQ+C,KAAM,QAAS,CAAE/C,KAAM,OAAQ+C,KAAM,UAEnEuE,IAAK,CACDtH,KAAM,MACNjB,SAAU,OACVmI,OAAQ,CAAC,CAAElH,KAAM,GAAI+C,KAAM,QAAS,CAAE/C,KAAM,QAAS+C,KAAM,OAAQ,CAAE/C,KAAM,OAAQ+C,KAAM,OAAQ,CAAE/C,KAAM,OAAQ+C,KAAM,QACvHoE,QAAS,CAAC,CAAEnH,KAAM,OAAQ+C,KAAM,QAAS,CAAE/C,KAAM,OAAQ+C,KAAM,UAInE1D,IAAK,CACDW,KAAM,MACNjB,SAAU,OACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,OAAQ,CAAC/C,KAAM,IAAK+C,KAAM,QACrDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,SAE/BU,SAAU,CACNzD,KAAM,WACNjB,SAAU,OACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,OAAQ,CAAC/C,KAAM,IAAK+C,KAAM,QACrDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,SAE/BwE,QAAS,CACLvH,KAAM,WACNjB,SAAU,OACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,OAAQ,CAAC/C,KAAM,IAAK+C,KAAM,QACrDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,SAE/ByE,OAAQ,CACJxH,KAAM,SACNjB,SAAU,OACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,OAAQ,CAAC/C,KAAM,IAAK+C,KAAM,QACrDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,SAI/B0E,IAAK,CACDzH,KAAM,MACNjB,SAAU,QACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,QAAS,CAAC/C,KAAM,IAAK+C,KAAM,SACtDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,UAE/B2E,GAAI,CACA1H,KAAM,KACNjB,SAAU,QACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,QAAS,CAAC/C,KAAM,IAAK+C,KAAM,SACtDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,UAE/B4E,IAAK,CACD3H,KAAM,MACNjB,SAAU,QACVmI,OAAQ,CAAC,CAAClH,KAAM,GAAI+C,KAAM,SAC1BoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,UAE/B6E,MAAO,CACH5H,KAAM,QACNjB,SAAU,QACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,OAAQ,CAAC/C,KAAM,IAAK+C,KAAM,QACrDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,UAE/B8E,SAAU,CACN7H,KAAM,YACNjB,SAAU,QACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,OAAQ,CAAC/C,KAAM,IAAK+C,KAAM,QACrDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,UAE/B+E,KAAM,CACF9H,KAAM,OACNjB,SAAU,QACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,OAAQ,CAAC/C,KAAM,IAAK+C,KAAM,QACrDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,UAE/BgF,YAAa,CACT/H,KAAM,gBACNjB,SAAU,QACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,OAAQ,CAAC/C,KAAM,IAAK+C,KAAM,QACrDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,UAE/BiF,QAAS,CACLhI,KAAM,UACNjB,SAAU,QACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,OAAQ,CAAC/C,KAAM,IAAK+C,KAAM,QACrDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,UAE/BkF,eAAgB,CACZjI,KAAM,mBACNjB,SAAU,QACVmI,OAAQ,CAAC,CAAClH,KAAM,IAAK+C,KAAM,OAAQ,CAAC/C,KAAM,IAAK+C,KAAM,QACrDoE,QAAS,CAAC,CAACnH,KAAM,GAAI+C,KAAM,U,iMCrGnC,iBAQI,WAAY7E,EAAc6E,EAAcV,GAAxC,WAII,GAVI,KAAA6F,QAA2D,GAC3D,KAAAC,SAAuB,GAM3BxH,KAAKyH,OAASlK,EACdyC,KAAK0H,MAAQtF,EAERA,KAAQ,EAAAjE,gBAAb,CAKA,IAAMwJ,EAAiB,EAAAxJ,gBAAgBiE,GAGvCpC,KAAK2B,QAAUlE,SAASe,cAAc,OACtCwB,KAAK2B,QAAQhE,iBAAiB,aAAa,SAAAC,GAAS,SAAKwD,YAAYxD,EAAjB,IACpDoC,KAAK2B,QAAQlD,UAAUC,IAAI,cAG3B,IAAMkJ,EAAuBnK,SAASe,cAAc,OACpDoJ,EAAKnJ,UAAUC,IAAI,QACnB,IAAMmJ,EAAyBpK,SAASe,cAAc,QACtDqJ,EAAMC,UAAYH,EAAetI,KACjCuI,EAAK9I,YAAY+I,GACjB7H,KAAK2B,QAAQ7C,YAAY8I,GAGzB,IAAMG,EAAuBtK,SAASe,cAAc,OACpDuJ,EAAKtJ,UAAUC,IAAI,QACnBsB,KAAK2B,QAAQ7C,YAAYiJ,GAIzB,IADA,IAAIC,EAAOC,KAAKC,IAAIP,EAAepB,OAAO3B,OAAQ+C,EAAenB,QAAQ5B,Q,WAChED,GACL,IAAMwD,EAAcxD,EAAI,EAExB,GAAGA,EAAIgD,EAAepB,OAAO3B,OAAQ,CACjC,IAAMwD,EAAQT,EAAepB,OAAO5B,GAC9BtC,EAAuBgG,EAAkBD,EAAMhG,MAGjDkG,EAAgB,IAAI,EAAAC,IAAI,EAAKd,OAAQ,EAAMpF,EAAW,EAAAE,QAAQE,OAClE6F,EAAS3G,QAAQC,MAAM4G,WAAa,IACpCF,EAAS3G,QAAQC,MAAM6G,QAAUN,EAAIO,WACrCX,EAAKjJ,YAAYwJ,EAAS3G,SAG1B,IAAMgH,EAA8BlL,SAASe,cAAc,QAC3DmK,EAAWb,UAAYM,EAAM/I,KAC7BsJ,EAAW/G,MAAM4G,WAAa,IAC9BG,EAAW/G,MAAM6G,QAAUN,EAAIO,WAC/BX,EAAKjJ,YAAY6J,GAGjB,IAAI,EAA6B,KAC9BtG,GAAa,EAAAuG,UAAUC,OACnBxG,GAAa,EAAAuG,UAAUE,IAAM,EAAAF,UAAUG,MAAQ,EAAAH,UAAUI,QACxD,EAAa,IAAIC,EACb5G,GAAa,EAAAuG,UAAUM,UAC3B,EAAa,IAAIC,GAErB,EAAWxH,QAAQC,MAAM4G,WAAa,IACtC,EAAW7G,QAAQC,MAAM6G,QAAUN,EAAIO,WACvCX,EAAKjJ,YAAY,EAAW6C,SAE5B2G,EAASc,eAAetJ,aAAY,SAACuJ,GACjC,EAAW1H,QAAQC,MAAM0H,WAAaD,EAAY,EAAI,SAAW,SACrE,KAGJ,EAAK9B,QAAQ7H,KAAK,CAAEuC,IAAKqG,EAAUiB,WAAY,G,CAqBnD,GAAG5E,EAAIgD,EAAenB,QAAQ5B,OAAQ,CAClC,IAAM4E,EAAS7B,EAAenB,QAAQ7B,GAGhC8E,GAFApH,EAAuBgG,EAAkBmB,EAAOpH,MAEjB3E,SAASe,cAAc,SAC5DiL,EAAYhL,UAAUC,IAAI,cAC1B+K,EAAY3B,UAAY0B,EAAOnK,KAC/BoK,EAAY7H,MAAM4G,WAAa,IAC/BiB,EAAY7H,MAAM6G,QAAUN,EAAIO,WAChCX,EAAKjJ,YAAY2K,GAEjB,IAAMC,EAAY,IAAI,EAAAnB,IAAI,EAAKd,OAAQ,EAAMpF,GAC7CqH,EAAU/H,QAAQC,MAAM4G,WAAa,IACrCkB,EAAU/H,QAAQC,MAAM6G,QAAUN,EAAIO,WACtC,EAAKlB,SAAS9H,KAAKgK,GACnB3B,EAAKjJ,YAAY4K,EAAU/H,Q,UAzE1BgD,EAAI,EAAGA,EAAIqD,EAAMrD,I,EAAjBA,GA4EUlH,SAASC,eAAe,eAChCoB,YAAYkB,KAAK2B,SAE5B3B,KAAK0B,SAAWA,C,MAzGZiI,QAAQC,MAAM,qBA0GtB,CAmCJ,OAjCI,sBAAI,uBAAQ,C,IAAZ,WACI,OAAO,IAAA/G,gBAAe7C,KAAK2B,QAC/B,E,IAEA,SAAaD,IACT,IAAA0B,gBAAepD,KAAK2B,QAASD,GAC7B1B,KAAKuH,QAAQhH,SAAQ,SAAA6H,GAAS,OAAAA,EAAMnG,IAAI4H,qBAAV,IAC9B7J,KAAKwH,SAASjH,SAAQ,SAAAiJ,GAAU,OAAAA,EAAOK,qBAAP,GACpC,E,gCAEA,sBAAI,mBAAI,C,IAAR,WACI,OAAO7J,KAAK0H,KAChB,E,gCAEA,YAAAoC,SAAA,SAASrF,GACL,IAAM2D,EAAkDpI,KAAKuH,QAAQ9C,GACrE,OAAG2D,EAAMnG,IAAI8H,MAAMnF,OAAS,EACjBwD,EAAMnG,IAAI8H,MAAM,GAAGjF,SAASrD,KAEhC2G,EAAMmB,WAAWtF,KAC5B,EAEQ,YAAA7C,YAAR,SAAoBxD,GAChB,GAAcA,EAAMoM,OAAQvL,UAAUwL,SAAS,eAG5B,GAAhBrM,EAAMC,OAAa,CAClBD,EAAM+F,iBAEN,IAAMjC,EAAkB,IAAI,EAAAuB,MAAMrF,EAAMsF,QAAStF,EAAMuF,SACvDnD,KAAKyH,OAAOjG,UAAUxB,KAAM0B,E,CAEpC,EACJ,EA1JA,GAAa,EAAA/B,KAAAA,EAiKb,iBAII,wBACIK,KAAKqF,SAAW5H,SAASe,cAAc,OACvCwB,KAAKqF,SAAS5G,UAAUC,IAAI,YAC5B,IAAMwL,EAAwBzM,SAASe,cAAc,QACrD0L,EAAKzL,UAAUC,IAAI,4BACnBwL,EAAKpC,UAAY,QACjB9H,KAAKqF,SAASvG,YAAYoL,GAC1BlK,KAAKqF,SAAS1H,iBAAiB,SAAS,WAAQ,EAAKwM,SAAW,EAAKC,QAAS,GAClF,CAcJ,OAZI,sBAAI,sBAAO,C,IAAX,SAAYD,GACRnK,KAAKoK,SAAWD,EAChBnK,KAAKqF,SAASI,aAAa,UAAW,UAAGzF,KAAKoK,UAClD,E,gCAEA,sBAAI,sBAAO,C,IAAX,WACI,OAAOpK,KAAKqF,QAChB,E,gCAEA,sBAAI,oBAAK,C,IAAT,WACI,OAAOrF,KAAKoK,SAAW,OAAS,OACpC,E,gCACJ,EA1BA,GA4BA,aAGI,aACIpK,KAAKqF,SAAW5H,SAASe,cAAc,QACvCwB,KAAKqF,SAAS5G,UAAUC,IAAI,SAC5BsB,KAAKqF,SAASI,aAAa,OAAQ,WACnCzF,KAAKqF,SAASI,aAAa,kBAAmB,OAClD,CASJ,OAPI,sBAAI,sBAAO,C,IAAX,WACI,OAAOzF,KAAKqF,QAChB,E,gCAEA,sBAAI,oBAAK,C,IAAT,WACI,OAAOrF,KAAKqF,SAASrG,WACzB,E,gCACJ,EAjBA,GAmBA,SAASqJ,EAAkBhG,GACvB,OAAOA,GACH,IAAK,OAKL,QAAS,OAAO,EAAAuG,UAAUC,KAJ1B,IAAK,MAAO,OAAO,EAAAD,UAAUE,IAC7B,IAAK,QAAS,OAAO,EAAAF,UAAUG,MAC/B,IAAK,SAAU,OAAO,EAAAH,UAAUI,OAChC,IAAK,OAAQ,OAAO,EAAAJ,UAAUM,QAGtC,C,qHCxNA,IAAY3G,EAKAqG,E,oFALZ,SAAYrG,GACR,uBACA,oBACH,CAHD,CAAYA,EAAA,EAAAA,UAAA,EAAAA,QAAO,KAKnB,SAAYqG,GACR,mBACA,iBACA,qBACA,uBACA,yBACH,CAND,CAAYA,EAAA,EAAAA,YAAA,EAAAA,UAAS,KAQrB,iBAaI,WAAYrL,EAAckE,EAAYY,EAAsBD,QAAA,IAAAA,IAAAA,EAAgBG,EAAQC,QAApF,WAmBI,OA/BI,KAAAkF,MAAiBnF,EAAQC,OAEjC,KAAAuH,MAAqB,GAQJ,KAAAM,kBAAoB,IAAI,EAAA5J,UAGrCT,KAAKyH,OAASlK,EACdyC,KAAKsK,MAAQ7I,EACbzB,KAAK0H,MAAQtF,EACbpC,KAAKuK,WAAalI,EAElBrC,KAAK2B,QAAUlE,SAASe,cAAc,OACtCwB,KAAK2B,QAAQlD,UAAUC,IAAI,OACxBsB,KAAK0H,OAASnF,EAAQC,QACrBxC,KAAK2B,QAAQlD,UAAUC,IAAI,SAE/BsB,KAAK2B,QAAQhE,iBAAiB,aAAa,SAAAC,GAAS,SAAKwD,YAAYxD,EAAjB,IACpDoC,KAAK2B,QAAQhE,iBAAiB,WAAW,SAAAC,GAAS,SAAK0D,UAAU1D,EAAf,IAClDoC,KAAK2B,QAAQhE,iBAAiB,cAAc,SAAAC,GAAS,SAAK4M,aAAa5M,EAAlB,IACrDoC,KAAK2B,QAAQhE,iBAAiB,cAAc,SAAAC,GAAS,SAAK6M,YAAY7M,EAAjB,IACrDoC,KAAK2B,QAAQhE,iBAAiB,eAAe,SAAAC,GAAS,OAAAA,EAAM+F,gBAAN,IAEtD3D,KAAK0K,QAAUjN,SAASe,cAAc,OACtCwB,KAAK0K,QAAQjM,UAAUC,IAAI,eACpBsB,KAAKuK,YACR,KAAK3B,EAAUC,KAAM7I,KAAK0K,QAAQjM,UAAUC,IAAI,aAAc,MAC9D,KAAKkK,EAAUE,IAAK9I,KAAK0K,QAAQjM,UAAUC,IAAI,YAAa,MAC5D,KAAKkK,EAAUG,MAAO/I,KAAK0K,QAAQjM,UAAUC,IAAI,cAAe,MAChE,KAAKkK,EAAUI,OAAQhJ,KAAK0K,QAAQjM,UAAUC,IAAI,eAAgB,MAClE,KAAKkK,EAAUM,QAASlJ,KAAK0K,QAAQjM,UAAUC,IAAI,gBAGvDsB,KAAK2B,QAAQ7C,YAAYkB,KAAK0K,QAClC,CAoFJ,OAlFI,sBAAI,mBAAI,C,IAAR,WAAsB,OAAO1K,KAAK0H,KAAO,E,gCACzC,sBAAI,wBAAS,C,IAAb,WAA6B,OAAO1H,KAAKuK,UAAY,E,gCACrD,sBAAI,mBAAI,C,IAAR,WAAmB,OAAOvK,KAAKsK,KAAO,E,gCAEtC,sBAAI,6BAAc,C,IAAlB,WAA2C,OAAOtK,KAAKqK,kBAAkB7J,QAAU,E,gCAEnF,sBAAI,uBAAQ,C,IAAZ,WACI,IAAMmK,EAAqB3K,KAAKyH,OAAOzG,UAAUsC,wBAC3CsH,EAAmB5K,KAAK2B,QAAQ2B,wBACtC,OAAO,IAAI,EAAAL,MACP2H,EAAQrH,KAAOqH,EAAQ7G,MAAQ,EAAI4G,EAAUpH,KAC7CqH,EAAQpH,IAAMoH,EAAQvE,OAAS,EAAIsE,EAAUnH,IACrD,E,gCAEA,YAAAd,QAAA,SAAQJ,GACJtC,KAAK+J,MAAMrK,KAAK4C,GAChBtC,KAAK6K,iBAAgB,GACrB7K,KAAKqK,kBAAkBjK,SAASJ,KAAK+J,MAAMnF,OAC/C,EAEA,YAAAiB,UAAA,SAAUvD,GACN,IAAImC,EAAgBzE,KAAK+J,MAAMe,QAAQxI,GACpCmC,GAAS,GACRzE,KAAK+J,MAAMgB,OAAOtG,EAAO,GAC1BzE,KAAK+J,MAAMnF,QAAU,GACpB5E,KAAK6K,iBAAgB,GACzB7K,KAAKqK,kBAAkBjK,SAASJ,KAAK+J,MAAMnF,OAC/C,EAEA,YAAAiF,oBAAA,sBACI,OAAO7J,KAAK0H,OACR,KAAKnF,EAAQC,OACTxC,KAAK+J,MAAMxJ,SAAQ,SAAA+B,GAAUA,EAAKoB,WAAa,EAAKhC,QAAS,IAC7D,MACJ,KAAKa,EAAQE,MACTzC,KAAK+J,MAAMxJ,SAAQ,SAAA+B,GAAUA,EAAKmB,SAAW,EAAK/B,QAAS,IAGvE,EAEQ,YAAAmJ,gBAAR,SAAwBG,GACjBA,EACChL,KAAK2B,QAAQlD,UAAUC,IAAI,SAE3BsB,KAAK2B,QAAQlD,UAAUmB,OAAO,QACtC,EAEQ,YAAAwB,YAAR,SAAoBxD,GAChB,GAAcA,EAAMoM,OAAQvL,UAAUwL,SAAS,OAG/C,GAAmB,GAAhBrM,EAAMC,OACLD,EAAM+F,iBACN/F,EAAME,kBACNkC,KAAKyH,OAAOzF,UAAUhC,WAErB,GAAmB,GAAhBpC,EAAMC,OAAa,CACvBD,EAAM+F,iBACN/F,EAAME,kBAGN,IADA,IAAMuL,EAAoBrJ,KAAK+J,MAAMnF,OAC5BD,EAAI,EAAGA,EAAI0E,EAAW1E,IAC3B3E,KAAK+J,MAAM,GAAGrE,S,CAE1B,EAEQ,YAAApE,UAAR,SAAkB1D,GACAA,EAAMoM,OAAQvL,UAAUwL,SAAS,QAG5B,GAAhBrM,EAAMC,QACLmC,KAAKyH,OAAOtF,QAAQnC,KAC5B,EAEQ,YAAAwK,aAAR,SAAqB5M,GACjBoC,KAAK6K,iBAAgB,EACzB,EAEQ,YAAAJ,YAAR,SAAoB7M,GACboC,KAAK+J,MAAMnF,QAAU,GACpB5E,KAAK6K,iBAAgB,EAC7B,EACJ,EA7HA,GAAa,EAAAtC,IAAAA,C,+MCnBb,iBAII,WAAYxF,EAAYC,GACpBhD,KAAK+C,EAAIA,QAAAA,EAAK,EACd/C,KAAKgD,EAAIA,QAAAA,EAAK,CAClB,CAaJ,OAXI,YAAAtE,IAAA,SAAIqE,EAAWC,GAGX,OAFAhD,KAAK+C,GAAKA,EACV/C,KAAKgD,GAAKA,EACHhD,IACX,EAEA,YAAA8C,SAAA,SAASC,EAAWC,GAGhB,OAFAhD,KAAK+C,GAAKA,EACV/C,KAAKgD,GAAKA,EACHhD,IACX,EACJ,EApBA,GAAa,EAAAiD,MAAAA,EAsBA,EAAAiD,KAMT,SAAYnD,EAAYC,EAAYe,EAAgBsC,GAChDrG,KAAK+C,EAAIA,QAAAA,EAAK,EACd/C,KAAKgD,EAAIA,QAAAA,EAAK,EACdhD,KAAK+D,MAAQA,QAAAA,EAAS,EACtB/D,KAAKqG,OAASA,QAAAA,EAAU,CAC5B,EAWJ,0BAA+B1E,GAC3B,IAAMC,EAA6BqJ,OAAOC,iBAAiBvJ,GACrDwJ,EAA4B,IAAIC,kBAAkBxJ,EAAMyJ,WAC9D,OAAO,IAAIpI,EAAMkI,EAAOG,IAAKH,EAAOI,IACxC,EAEA,sBAA2B5J,GACvB,OAAO,IAAIsB,EAAMtB,EAAQ6J,WAAY7J,EAAQ8J,UACjD,EAEA,0BAA+B9J,EAAmC+J,GAC9D/J,EAAQC,MAAMyJ,UAAY,oBAAaK,EAAY3I,EAAC,eAAO2I,EAAY1I,EAAC,MAC5E,C,6CCvDI2I,EAA2B,CAAC,GAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB7G,IAAjB8G,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CCnB0BH,CAAoB,I","sources":["webpack:///./src/add-node-menu.ts","webpack:///./src/event.ts","webpack:///./src/graph.ts","webpack:///./src/index.ts","webpack:///./src/link.ts","webpack:///./src/node-definitions.ts","webpack:///./src/node.ts","webpack:///./src/pin.ts","webpack:///./src/util.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["import { Graph } from \"./graph\";\r\nimport { Node } from \"./node\";\r\nimport { nodeDefinitions } from \"./node-definitions\";\r\nimport { getTopLeft } from \"./util\";\r\n\r\n// Generate add node menu items\r\nfunction addTreeViewBranch(parent: HTMLUListElement, label: string): HTMLUListElement {\r\n    const branchElement: HTMLLIElement = document.createElement(\"li\");\r\n    branchElement.classList.add(\"branch\");\r\n    branchElement.addEventListener(\"click\", () => branchElement.classList.toggle(\"expanded\"));\r\n    \r\n    const rowElement: HTMLDivElement = document.createElement(\"div\");\r\n    const arrowElement: HTMLSpanElement = document.createElement(\"span\");\r\n    arrowElement.classList.add(\"material-symbols-rounded\");\r\n    rowElement.appendChild(arrowElement);\r\n    const labelElement: HTMLSpanElement = document.createElement(\"span\");\r\n    labelElement.textContent = label;\r\n    rowElement.appendChild(labelElement);\r\n    branchElement.appendChild(rowElement);\r\n    \r\n    const childList: HTMLUListElement = document.createElement(\"ul\");\r\n    branchElement.appendChild(childList);\r\n    \r\n    parent.appendChild(branchElement);\r\n    return childList;\r\n}\r\n\r\nfunction addTreeViewListItem(parent: HTMLUListElement, label: string): HTMLLIElement {\r\n    const itemElement: HTMLLIElement = document.createElement(\"li\");\r\n    itemElement.classList.add(\"branch\");\r\n    \r\n    const rowElement: HTMLDivElement = document.createElement(\"div\");\r\n    const labelElement: HTMLSpanElement = document.createElement(\"span\");\r\n    labelElement.textContent = label;\r\n    rowElement.appendChild(labelElement);\r\n    itemElement.appendChild(rowElement);\r\n    \r\n    parent.appendChild(itemElement);\r\n    return itemElement;\r\n}\r\n\r\nexport function initAddNodeMenu(graph: Graph) {\r\n    const nodeMenu: HTMLElement = document.getElementById(\"node-menu\");\r\n    nodeMenu.addEventListener(\"mousedown\", event => {\r\n        if(event.button == 0)\r\n            event.stopPropagation();\r\n    });\r\n    \r\n    const nodeTreeView: HTMLUListElement = <HTMLUListElement>document.getElementById(\"node-tree-view\");\r\n    const categoryLists = {};\r\n    \r\n    for (let key in nodeDefinitions) {\r\n        const definition = nodeDefinitions[key];\r\n        if(!(definition.category in categoryLists))\r\n            categoryLists[definition.category] = addTreeViewBranch(nodeTreeView, definition.category);\r\n        \r\n        const listItem: HTMLLIElement = addTreeViewListItem(categoryLists[definition.category], definition.name);\r\n        listItem.addEventListener(\"click\", event => {\r\n            if(event.button == 0) {\r\n                event.stopPropagation();\r\n                const nodePosition = graph.viewportToAreaPoint(getTopLeft(nodeMenu));\r\n                graph.nodes.push(new Node(graph, key, nodePosition));\r\n                nodeMenu.classList.remove(\"visible\");\r\n            }\r\n        });\r\n    }\r\n}","export interface ILiteEvent<T> {\r\n    addListener(handler: { (data?: T): void }) : void;\r\n    removeListener(handler: { (data?: T): void }) : void;\r\n}\r\n\r\nexport class LiteEvent<T> implements ILiteEvent<T> {\r\n    private handlers: { (data?: T): void; }[] = [];\r\n\r\n    public addListener(handler: { (data?: T): void }): void {\r\n        this.handlers.push(handler);\r\n    }\r\n\r\n    public removeListener(handler: { (data?: T): void }): void {\r\n        this.handlers = this.handlers.filter(h => h !== handler);\r\n    }\r\n\r\n    public dispatch(data?: T): void {\r\n        this.handlers.slice(0).forEach(h => h(data));\r\n    }\r\n\r\n    public expose() : ILiteEvent<T> {\r\n        return this;\r\n    }\r\n}","import { Pin, PinType } from \"./pin\";\r\nimport { Node } from \"./node\";\r\nimport { Link } from \"./link\";\r\nimport { Point, getTranslation, setTranslation } from \"./util\";\r\n\r\nexport class Graph {\r\n    viewport: HTMLElement;\r\n    graphArea: HTMLElement;\r\n    nodes: Array<Node> = [];\r\n    \r\n    private _dragCursorBegin: Point;\r\n    private _dragTargetBegin: Point;\r\n    \r\n    private _panning: boolean = false;\r\n    private _dragging: boolean = false;\r\n\r\n    private _dragNode: Node = null;\r\n    \r\n    private _linking: boolean = false;\r\n    private _linkPin: Pin = null;\r\n    private _drawingLink: Link;\r\n\r\n    constructor() {\r\n        this.viewport = document.getElementById(\"graph-viewport\");\r\n        this.graphArea = document.getElementById(\"graph-area\");\r\n        this._drawingLink = new Link();\r\n        this._drawingLink.reset();\r\n        this.viewport.addEventListener(\"mousedown\", event => this.onMouseDown(event));\r\n        this.viewport.addEventListener(\"mousemove\", event => this.onMouseMove(event));\r\n        this.viewport.addEventListener(\"mouseup\", event => this.onMouseUp(event));\r\n        this.viewport.addEventListener(\"contextmenu\", event => this.onContextMenu(event));\r\n    }\r\n\r\n    beginDrag(node: Node, position: Point): void {\r\n        if(this._panning || this._linking)\r\n            return;\r\n\r\n        this._dragNode = node;\r\n        this._dragNode.element.style.cursor = \"grabbing\";\r\n        this._dragCursorBegin = position;\r\n        this._dragTargetBegin = this._dragNode.position;\r\n        this._dragging = true;\r\n    }\r\n\r\n    beginLink(pin: Pin): void {\r\n        if(this._panning || this._dragging)\r\n            return;\r\n\r\n        this._linkPin = pin;\r\n        this._linking = true;\r\n\r\n        const position: Point = this._linkPin.position;\r\n        this._drawingLink.setPoints(position, position);\r\n    }\r\n\r\n    endLink(pin: Pin): void {\r\n        if(this._linkPin != pin\r\n            && this._linkPin.type != pin.type         \r\n            && this._linkPin.node != pin.node\r\n            && this._linkPin.valueType == pin.valueType) {\r\n            let link: Link;\r\n            switch(this._linkPin.type) {\r\n                case PinType.Output:\r\n                    link = new Link(this._linkPin, pin);\r\n                    break;\r\n                case PinType.Input:\r\n                    link = new Link(pin, this._linkPin);\r\n                    break;\r\n            }                \r\n            this._linkPin.addLink(link);\r\n            pin.addLink(link);\r\n        }\r\n        this._drawingLink.reset();\r\n        this._linking = false;\r\n    }\r\n\r\n    viewportToAreaPoint(point: Point): Point {\r\n        const areaPos = getTranslation(this.graphArea);\r\n        return point.subtract(areaPos.x, areaPos.y);\r\n    }\r\n\r\n    private onMouseDown(event: MouseEvent): void {\r\n        if(event.button == 0)\r\n            document.getElementById(\"node-menu\").classList.remove(\"visible\");\r\n\r\n        if(event.button == 1 && !this._dragging && !this._linking) {\r\n            this._dragTargetBegin = getTranslation(this.graphArea);\r\n            this._dragCursorBegin = new Point(event.clientX, event.clientY);\r\n            this._panning = true;\r\n        }\r\n    }\r\n\r\n    private onMouseMove(event: MouseEvent): void {\r\n        if(this._panning) {\r\n            let position: Point = new Point(\r\n                this._dragTargetBegin.x + event.clientX - this._dragCursorBegin.x,\r\n                this._dragTargetBegin.y + event.clientY - this._dragCursorBegin.y\r\n            );\r\n            setTranslation(this.graphArea, position);\r\n        }\r\n\r\n        if(this._dragging) {\r\n            let position: Point = new Point(\r\n                this._dragTargetBegin.x + event.clientX - this._dragCursorBegin.x,\r\n                this._dragTargetBegin.y + event.clientY - this._dragCursorBegin.y\r\n            );\r\n            this._dragNode.position = position;\r\n        }\r\n    \r\n        if(this._linking) {\r\n            const areaRect: DOMRect = this.graphArea.getBoundingClientRect();\r\n            const position: Point = new Point(event.clientX - areaRect.left, event.clientY - areaRect.top);\r\n            switch(this._linkPin.type) {\r\n                case PinType.Output:\r\n                    this._drawingLink.endPoint = position;\r\n                    break;\r\n                case PinType.Input:\r\n                    this._drawingLink.startPoint = position;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onMouseUp(event: MouseEvent): void {\r\n        if(this._panning) {\r\n            this._panning = false;\r\n        }\r\n        \r\n        if(this._dragging) {\r\n            this._dragNode.element.style.cursor = null;\r\n            this._dragNode = null;\r\n            this._dragging = false;\r\n        }\r\n\r\n        if(this._linking) {\r\n            this._drawingLink.reset();\r\n            this._linking = false;\r\n        }\r\n    }\r\n\r\n    private onContextMenu(event: MouseEvent): void {\r\n        event.preventDefault();\r\n        const viewportRect: DOMRect = this.viewport.getBoundingClientRect();\r\n        const nodeMenu: HTMLElement = document.getElementById(\"node-menu\");\r\n        const nodeMenuRect: DOMRect = nodeMenu.getBoundingClientRect();\r\n        const alignRight = event.clientX > viewportRect.width / 2;\r\n        nodeMenu.style.left = `${event.clientX - viewportRect.x - (alignRight ? nodeMenuRect.width : 0)}px`;\r\n        nodeMenu.style.top = `${event.clientY - viewportRect.y}px`;\r\n        nodeMenu.classList.add(\"visible\");\r\n\r\n        const searchbar: HTMLInputElement = <HTMLInputElement>document.getElementById(\"node-search-bar\");\r\n        searchbar.value = \"\";\r\n        searchbar.focus();\r\n    }\r\n}\r\n","let nodes = [\r\n    {\r\n        id: 0,\r\n        type: \"start\",\r\n        posX: 32,\r\n        posY: 32,\r\n        inLinks: [],\r\n        outLinks: [{node: 1, index: 0}]\r\n    },\r\n    {\r\n        id: 1,\r\n        type: \"add\",\r\n        posX: 160,\r\n        posY: 32,\r\n        inLinks: [{node: 0, index: 0}, {node: null}],\r\n        outLinks: [{node: null}]\r\n    },\r\n    {\r\n        id: 2,\r\n        type: \"if\",\r\n        posX: 288,\r\n        posY: 32,\r\n        inLinks: [],\r\n        outLinks: []\r\n    }\r\n];\r\n\r\nimport { Graph } from \"./graph\";\r\nimport { Node } from \"./node\";\r\nimport { Point } from \"./util\";\r\nimport { initAddNodeMenu } from \"./add-node-menu\";\r\n\r\n// Generate graph\r\nconst graph: Graph = new Graph();\r\ninitAddNodeMenu(graph);\r\n\r\n// Load nodes\r\nfor (let i = 0; i < nodes.length; i++) {\r\n    const nodeData = nodes[i];\r\n    graph.nodes.push(new Node(graph, nodeData.type, new Point(nodeData.posX, nodeData.posY)));\r\n}\r\n","import { Pin } from \"./pin\";\r\nimport { Point, Rect, setTranslation } from \"./util\";\r\n\r\nexport class Link {\r\n    static readonly curve : number = 32;\r\n\r\n    private _startPoint: Point;\r\n    private _endPoint: Point;\r\n    private _element: SVGElement;\r\n    private _path: SVGPathElement;\r\n    \r\n    private _startPin: Pin;\r\n    private _endPin: Pin;\r\n\r\n    constructor(startPin?: Pin, endPin?: Pin) {      \r\n        if(startPin != undefined && startPin != null) {\r\n            this._startPin = startPin;\r\n            this._startPoint = startPin.position;\r\n        }\r\n        else {\r\n            this._startPin = null;\r\n            this._startPoint = new Point();\r\n        }\r\n\r\n        if(endPin != undefined && endPin != null) {\r\n            this._endPin = endPin;\r\n            this._endPoint = endPin.position;\r\n        }\r\n        else {\r\n            this._endPin = null;\r\n            this._endPoint = new Point();\r\n        }\r\n        this._element = <SVGElement>document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n        this._element.classList.add(\"graph-link\");\r\n        this._path = <SVGPathElement>document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n        this._element.appendChild(this._path);\r\n        const graphLinks: HTMLElement = document.getElementById(\"graph-links\");\r\n        graphLinks.appendChild(this._element);\r\n        this.updatePath();\r\n    }\r\n\r\n    get startPin(): Pin {\r\n        return this._startPin;\r\n    }\r\n\r\n    get endPin(): Pin {\r\n        return this._endPin;\r\n    }\r\n\r\n    set startPoint(startPoint: Point) {\r\n        this._startPoint = startPoint;\r\n        this.updatePath();\r\n    }\r\n\r\n    set endPoint(endPoint: Point) {\r\n        this._endPoint = endPoint;\r\n        this.updatePath();\r\n    }\r\n\r\n    setPoints(startPoint: Point, endPoint: Point): void {\r\n        this._startPoint = startPoint;\r\n        this._endPoint = endPoint;\r\n        this.updatePath();\r\n    }\r\n\r\n    reset(): void {\r\n        this._startPoint = new Point(0, 0);\r\n        this._endPoint = new Point(0, 0);\r\n        this._path.setAttribute(\"d\", \"\");\r\n    }\r\n\r\n    destroy(): void {\r\n        this._path.parentElement.removeChild(this._path);\r\n        this._startPin.breakLink(this);\r\n        this._endPin.breakLink(this);\r\n    }\r\n\r\n    private updatePath(): void {\r\n        const startControlX: number = this._startPoint.x + Link.curve;\r\n        const endControlX: number = this._endPoint.x - Link.curve;\r\n\r\n        const newBounds: Rect = new Rect();\r\n\r\n        const s: Point = new Point();\r\n        const e: Point = new Point();\r\n\r\n        if(this._startPoint.x <= endControlX) {\r\n            newBounds.x = this._startPoint.x;\r\n            newBounds.width = this._endPoint.x - this._startPoint.x;\r\n            e.x = newBounds.width;\r\n        }\r\n        else {\r\n            newBounds.x = endControlX;\r\n            newBounds.width = startControlX - endControlX;\r\n            s.x = this._startPoint.x - endControlX;\r\n            e.x = Link.curve;\r\n        }\r\n\r\n        if(this._startPoint.y <= this._endPoint.y) {\r\n            newBounds.y = this._startPoint.y - 2;\r\n            newBounds.height = this._endPoint.y - this._startPoint.y + 4;\r\n            s.y = 2;\r\n            e.y = newBounds.height - 2;\r\n        }\r\n        else {\r\n            newBounds.y = this._endPoint.y - 2;\r\n            newBounds.height = this._startPoint.y - this._endPoint.y + 4;\r\n            s.y = newBounds.height - 2;\r\n            e.y = 2;\r\n        }\r\n\r\n        setTranslation(this._element, new Point(newBounds.x, newBounds.y));\r\n        this._element.setAttribute(\"width\", `${newBounds.width}`);\r\n        this._element.setAttribute(\"height\", `${newBounds.height}`)\r\n        \r\n        this._path.setAttribute(\"d\", `M ${s.x} ${s.y} C ${s.x + Link.curve} ${s.y}, ${e.x - Link.curve} ${e.y}, ${e.x} ${e.y}`);\r\n    }\r\n}","export const nodeDefinitions = {\r\n    // Flow\r\n    start: {\r\n        name: \"Start\",\r\n        category: \"Flow\",\r\n        inputs: [],\r\n        outputs: [{name: \"\", type: \"Flow\"}]\r\n    },\r\n    if: {\r\n        name: \"If\",\r\n        category: \"Flow\",\r\n        inputs: [{ name: \"\", type: \"Flow\"}, { name: \"Condition\", type: \"Bool\"}],\r\n        outputs: [{ name: \"True\", type: \"Flow\"}, { name: \"False\", type: \"Flow\"}]\r\n    },\r\n    while: {\r\n        name: \"While\",\r\n        category: \"Flow\",\r\n        inputs: [{ name: \"\", type: \"Flow\"}, { name: \"Condition\", type: \"Bool\"}],\r\n        outputs: [{ name: \"Exit\", type: \"Flow\"}, { name: \"Body\", type: \"Flow\"}]\r\n    },\r\n    for: {\r\n        name: \"For\",\r\n        category: \"Flow\",\r\n        inputs: [{ name: \"\", type: \"Flow\"}, { name: \"Start\", type: \"Int\"}, { name: \"Last\", type: \"Int\"}, { name: \"Step\", type: \"Int\"}],\r\n        outputs: [{ name: \"Exit\", type: \"Flow\"}, { name: \"Body\", type: \"Flow\"}]\r\n    },\r\n\r\n    // Math\r\n    add: {\r\n        name: \"Add\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n    subtract: {\r\n        name: \"Subtract\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n    multipy: {\r\n        name: \"Multiply\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n    divide: {\r\n        name: \"Divide\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n\r\n    // Logic\r\n    and: {\r\n        name: \"And\",\r\n        category: \"Logic\",\r\n        inputs: [{name: \"A\", type: \"Bool\"}, {name: \"B\", type: \"Bool\"}],\r\n        outputs: [{name: \"\", type: \"Bool\"}]\r\n    },\r\n    or: {\r\n        name: \"Or\",\r\n        category: \"Logic\",\r\n        inputs: [{name: \"A\", type: \"Bool\"}, {name: \"B\", type: \"Bool\"}],\r\n        outputs: [{name: \"\", type: \"Bool\"}]\r\n    },\r\n    not: {\r\n        name: \"Not\",\r\n        category: \"Logic\",\r\n        inputs: [{name: \"\", type: \"Bool\"}],\r\n        outputs: [{name: \"\", type: \"Bool\"}]\r\n    },\r\n    equal: {\r\n        name: \"Equal\",\r\n        category: \"Logic\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Bool\"}]\r\n    },\r\n    notEqual: {\r\n        name: \"Not Equal\",\r\n        category: \"Logic\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Bool\"}]\r\n    },\r\n    less: {\r\n        name: \"Less\",\r\n        category: \"Logic\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Bool\"}]\r\n    },\r\n    lessOrEqual: {\r\n        name: \"Less Or Equal\",\r\n        category: \"Logic\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Bool\"}]\r\n    },\r\n    greater: {\r\n        name: \"Greater\",\r\n        category: \"Logic\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Bool\"}]\r\n    },\r\n    greaterOrEqual: {\r\n        name: \"Greater Or Equal\",\r\n        category: \"Logic\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Bool\"}]\r\n    }\r\n};","import { Graph } from \"./graph\";\r\nimport { Pin, PinType, ValueType } from \"./pin\";\r\nimport { nodeDefinitions } from \"./node-definitions\";\r\nimport { Point, getTranslation, setTranslation } from \"./util\";\r\n\r\nexport class Node {\r\n    element : HTMLDivElement;\r\n    private _inputs: Array<{ pin: Pin, valueField: NodeValueField }> = [];\r\n    private _outputs: Array<Pin> = [];\r\n\r\n    private _graph: Graph;\r\n    private _type: string;\r\n\r\n    constructor(graph: Graph, type: string, position: Point) {\r\n        this._graph = graph;\r\n        this._type = type;\r\n\r\n        if(!(type in nodeDefinitions)) {\r\n            console.error(\"Invalid node types\");\r\n            return;\r\n        }\r\n\r\n        const nodeDefinition = nodeDefinitions[type];\r\n    \r\n        // Node\r\n        this.element = document.createElement(\"div\");\r\n        this.element.addEventListener(\"mousedown\", event => this.onMouseDown(event));\r\n        this.element.classList.add(\"graph-node\");\r\n    \r\n        // Head\r\n        const head: HTMLDivElement = document.createElement(\"div\");\r\n        head.classList.add(\"head\");\r\n        const title: HTMLSpanElement = document.createElement(\"span\");\r\n        title.innerHTML = nodeDefinition.name;\r\n        head.appendChild(title);\r\n        this.element.appendChild(head);\r\n\r\n        // Body\r\n        const body: HTMLDivElement = document.createElement(\"div\");\r\n        body.classList.add(\"body\");\r\n        this.element.appendChild(body);\r\n    \r\n        // Rows\r\n        let rows = Math.max(nodeDefinition.inputs.length, nodeDefinition.outputs.length);\r\n        for (let i = 0; i < rows; i++) {\r\n            const row: number = i + 1;\r\n\r\n            if(i < nodeDefinition.inputs.length) {\r\n                const input = nodeDefinition.inputs[i];\r\n                const valueType: ValueType = stringToValueType(input.type);\r\n\r\n                // Input Pin\r\n                let inputPin: Pin = new Pin(this._graph, this, valueType, PinType.Input);\r\n                inputPin.element.style.gridColumn = \"1\";\r\n                inputPin.element.style.gridRow = row.toString();\r\n                body.appendChild(inputPin.element);\r\n                \r\n                // Input Label\r\n                const inputLabel: HTMLSpanElement = document.createElement(\"span\");\r\n                inputLabel.innerHTML = input.name;\r\n                inputLabel.style.gridColumn = \"2\";\r\n                inputLabel.style.gridRow = row.toString();\r\n                body.appendChild(inputLabel);\r\n                \r\n                // Input Field\r\n                let valueField: NodeValueField = null;\r\n                if(valueType != ValueType.Flow) {\r\n                    if(valueType & (ValueType.Int | ValueType.Float | ValueType.String))\r\n                        valueField = new TextValueField();\r\n                    else if(valueType == ValueType.Boolean) \r\n                        valueField = new BooleanValueField();\r\n    \r\n                    valueField.element.style.gridColumn = \"3\";\r\n                    valueField.element.style.gridRow = row.toString();\r\n                    body.appendChild(valueField.element);\r\n    \r\n                    inputPin.onLinksChanged.addListener((linkCount: number) => {\r\n                        valueField.element.style.visibility = linkCount > 0 ? \"hidden\" : \"visible\";\r\n                    });\r\n                }\r\n\r\n                this._inputs.push({ pin: inputPin, valueField: valueField });\r\n\r\n                /* Enum\r\n                else if(valueType == ValueType.Enum) {\r\n                    const inputSelect: HTMLSelectElement = document.createElement(\"select\");\r\n                    const trueOption = document.createElement(\"option\");\r\n                    trueOption.innerHTML = \"True\";\r\n                    inputSelect.options.add(trueOption);\r\n                    const falseOption = document.createElement(\"option\");\r\n                    falseOption.innerHTML = \"False\";\r\n                    inputSelect.options.add(falseOption);\r\n                    inputSelect.style.gridColumn = \"3\";\r\n                    inputSelect.style.gridRow = row.toString();\r\n                    body.appendChild(inputSelect);\r\n\r\n                    inputPin.onLinksChanged.addListener((linkCount: number) => {\r\n                        inputSelect.style.visibility = linkCount > 0 ? \"hidden\" : \"visible\";\r\n                    });\r\n                }*/\r\n            }\r\n    \r\n            if(i < nodeDefinition.outputs.length) {\r\n                const output = nodeDefinition.outputs[i];\r\n                const valueType: ValueType = stringToValueType(output.type);\r\n\r\n                const outputLabel: HTMLSpanElement = document.createElement(\"span\");\r\n                outputLabel.classList.add(\"text-right\");\r\n                outputLabel.innerHTML = output.name;\r\n                outputLabel.style.gridColumn = \"5\";\r\n                outputLabel.style.gridRow = row.toString();\r\n                body.appendChild(outputLabel);\r\n\r\n                const outputPin = new Pin(this._graph, this, valueType);\r\n                outputPin.element.style.gridColumn = \"6\";\r\n                outputPin.element.style.gridRow = row.toString();\r\n                this._outputs.push(outputPin);\r\n                body.appendChild(outputPin.element);\r\n            }\r\n        }\r\n        const graphNodes = document.getElementById(\"graph-nodes\");\r\n        graphNodes.appendChild(this.element);\r\n\r\n        this.position = position;\r\n    }\r\n\r\n    get position(): Point {\r\n        return getTranslation(this.element);\r\n    }\r\n\r\n    set position(position: Point) {\r\n        setTranslation(this.element, position);\r\n        this._inputs.forEach(input => input.pin.updateLinkPositions());\r\n        this._outputs.forEach(output => output.updateLinkPositions());\r\n    }\r\n\r\n    get type(): string {\r\n        return this._type;\r\n    }\r\n\r\n    getInput(index: number): Node | string {\r\n        const input: { pin: Pin, valueField: NodeValueField } = this._inputs[index];\r\n        if(input.pin.links.length > 0) {\r\n            return input.pin.links[0].startPin.node;\r\n        }\r\n        return input.valueField.value;\r\n    }\r\n\r\n    private onMouseDown(event: MouseEvent): void {\r\n        if(!(<Element>event.target).classList.contains(\"graph-node\"))\r\n            return; \r\n        \r\n        if(event.button == 0) {\r\n            event.preventDefault();\r\n\r\n            const position: Point = new Point(event.clientX, event.clientY);\r\n            this._graph.beginDrag(this, position);\r\n        }\r\n    }\r\n}\r\n\r\ninterface NodeValueField {\r\n    get element(): HTMLElement;\r\n    get value(): string;\r\n}\r\n\r\nclass BooleanValueField implements NodeValueField {\r\n    private _checked: boolean;\r\n    private _element: HTMLDivElement;\r\n\r\n    constructor() {\r\n        this._element = document.createElement(\"div\");\r\n        this._element.classList.add(\"checkbox\");\r\n        const tick: HTMLSpanElement = document.createElement(\"span\");\r\n        tick.classList.add(\"material-symbols-rounded\");\r\n        tick.innerHTML = \"check\";\r\n        this._element.appendChild(tick);\r\n        this._element.addEventListener(\"click\", () => { this.checked = !this._checked });\r\n    }\r\n\r\n    set checked(checked: boolean) {\r\n        this._checked = checked;\r\n        this._element.setAttribute(\"checked\", `${this._checked}`);\r\n    }\r\n\r\n    get element(): HTMLElement {\r\n        return this._element;\r\n    }\r\n\r\n    get value(): string {\r\n        return this._checked ? \"true\" : \"false\";\r\n    }\r\n}\r\n\r\nclass TextValueField implements NodeValueField {\r\n    private _element: HTMLSpanElement;\r\n\r\n    constructor() {\r\n        this._element = document.createElement(\"span\");\r\n        this._element.classList.add(\"input\");\r\n        this._element.setAttribute(\"role\", \"textbox\");\r\n        this._element.setAttribute(\"contenteditable\", \"true\");\r\n    }\r\n\r\n    get element(): HTMLElement {\r\n        return this._element;\r\n    }\r\n\r\n    get value(): string {\r\n        return this._element.textContent;\r\n    }\r\n}\r\n\r\nfunction stringToValueType(valueType: string): ValueType {\r\n    switch(valueType) {\r\n        case \"Flow\": return ValueType.Flow;\r\n        case \"Int\": return ValueType.Int;\r\n        case \"Float\": return ValueType.Float;\r\n        case \"String\": return ValueType.String;\r\n        case \"Bool\": return ValueType.Boolean;\r\n        default: return ValueType.Flow;\r\n    }\r\n}","import { Link } from \"./link\";\r\nimport { Graph } from \"./graph\";\r\nimport { Node } from \"./node\";\r\nimport { ILiteEvent, LiteEvent } from \"./event\";\r\nimport { Point } from \"./util\";\r\n\r\nexport enum PinType {\r\n    Output,\r\n    Input\r\n}\r\n\r\nexport enum ValueType {\r\n    Flow = 1,\r\n    Int = 2,\r\n    Float = 4,\r\n    String = 8,\r\n    Boolean = 16\r\n}\r\n\r\nexport class Pin {\r\n    private _type: PinType = PinType.Output;\r\n    private _valueType: ValueType;\r\n    links: Array<Link> = [];\r\n\r\n    private _graph: Graph;\r\n    private _node: Node;\r\n\r\n    element: HTMLDivElement;\r\n    private graphic: HTMLDivElement;\r\n\r\n    private readonly linksChangedEvent = new LiteEvent<number>();\r\n\r\n    constructor(graph: Graph, node: Node, valueType: ValueType, type: PinType = PinType.Output) {\r\n        this._graph = graph;\r\n        this._node = node;\r\n        this._type = type;\r\n        this._valueType = valueType;\r\n\r\n        this.element = document.createElement(\"div\");\r\n        this.element.classList.add(\"pin\");\r\n        if(this._type == PinType.Output)\r\n            this.element.classList.add(\"right\");\r\n\r\n        this.element.addEventListener(\"mousedown\", event => this.onMouseDown(event));\r\n        this.element.addEventListener(\"mouseup\", event => this.onMouseUp(event));\r\n        this.element.addEventListener(\"mouseenter\", event => this.onMouseEnter(event));\r\n        this.element.addEventListener(\"mouseleave\", event => this.onMouseExit(event))\r\n        this.element.addEventListener(\"contextmenu\", event => event.preventDefault());\r\n\r\n        this.graphic = document.createElement(\"div\");\r\n        this.graphic.classList.add(\"pin-graphic\");\r\n        switch(this._valueType) {\r\n            case ValueType.Flow: this.graphic.classList.add(\"type-flow\"); break;\r\n            case ValueType.Int: this.graphic.classList.add(\"type-int\"); break;\r\n            case ValueType.Float: this.graphic.classList.add(\"type-float\"); break;\r\n            case ValueType.String: this.graphic.classList.add(\"type-string\"); break;\r\n            case ValueType.Boolean: this.graphic.classList.add(\"type-boolean\"); break;\r\n        }\r\n\r\n        this.element.appendChild(this.graphic);\r\n    }\r\n\r\n    get type(): PinType { return this._type; }\r\n    get valueType(): ValueType { return this._valueType; }\r\n    get node(): Node { return this._node; }\r\n\r\n    get onLinksChanged(): ILiteEvent<number> { return this.linksChangedEvent.expose(); }\r\n\r\n    get position(): Point {\r\n        const graphRect: DOMRect = this._graph.graphArea.getBoundingClientRect();\r\n        const pinRect: DOMRect = this.element.getBoundingClientRect();\r\n        return new Point(\r\n            pinRect.left + pinRect.width / 2 - graphRect.left,\r\n            pinRect.top + pinRect.height / 2 - graphRect.top);\r\n    }\r\n\r\n    addLink(link: Link): void {\r\n        this.links.push(link);\r\n        this.setGraphicSolid(true);\r\n        this.linksChangedEvent.dispatch(this.links.length);\r\n    }\r\n\r\n    breakLink(link: Link): void {\r\n        let index: number = this.links.indexOf(link);\r\n        if(index > -1)\r\n            this.links.splice(index, 1);\r\n        if(this.links.length <= 0)\r\n            this.setGraphicSolid(false);\r\n        this.linksChangedEvent.dispatch(this.links.length);\r\n    }\r\n\r\n    updateLinkPositions(): void {\r\n        switch(this._type) {\r\n            case PinType.Output:\r\n                this.links.forEach(link => { link.startPoint = this.position });\r\n                break;\r\n            case PinType.Input:\r\n                this.links.forEach(link => { link.endPoint = this.position });\r\n                break;\r\n        }\r\n    }\r\n\r\n    private setGraphicSolid(solid: boolean): void {\r\n        if(solid)\r\n            this.element.classList.add(\"solid\");\r\n        else\r\n            this.element.classList.remove(\"solid\");\r\n    }\r\n\r\n    private onMouseDown(event: MouseEvent): void {\r\n        if(!(<Element>event.target).classList.contains(\"pin\"))\r\n            return;\r\n\r\n        if(event.button == 0) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this._graph.beginLink(this);\r\n        }\r\n        else if(event.button == 2) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            const linkCount: number = this.links.length;\r\n            for (let i = 0; i < linkCount; i++)\r\n                this.links[0].destroy();     \r\n        }\r\n    }\r\n\r\n    private onMouseUp(event: MouseEvent): void {\r\n        if(!(<Element>event.target).classList.contains(\"pin\"))\r\n            return;\r\n\r\n        if(event.button == 0)\r\n            this._graph.endLink(this);\r\n    }\r\n\r\n    private onMouseEnter(event: MouseEvent): void {\r\n        this.setGraphicSolid(true);\r\n    }\r\n\r\n    private onMouseExit(event: MouseEvent): void {\r\n        if(this.links.length <= 0)\r\n            this.setGraphicSolid(false);\r\n    }\r\n}","export class Point {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x?: number, y?: number) {\r\n        this.x = x ?? 0;\r\n        this.y = y ?? 0;\r\n    }\r\n\r\n    add(x: number, y: number): Point {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n    subtract(x: number, y: number): Point {\r\n        this.x -= x;\r\n        this.y -= y;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class Rect {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(x?: number, y?: number, width?: number, height?: number) {\r\n        this.x = x ?? 0;\r\n        this.y = y ?? 0;\r\n        this.width = width ?? 0;\r\n        this.height = height ?? 0;\r\n    }\r\n}\r\n\r\nfunction roundMultiple(value: number, multiple: number): number {\r\n    return Math.round(value / multiple) * multiple;\r\n}\r\n\r\nfunction ceilMultiple(value: number, multiple: number): number {\r\n    return Math.ceil(value / multiple) * multiple;\r\n}\r\n\r\nexport function getTranslation(element: HTMLElement): Point {\r\n    const style: CSSStyleDeclaration = window.getComputedStyle(element);\r\n    const matrix: DOMMatrixReadOnly = new DOMMatrixReadOnly(style.transform);\r\n    return new Point(matrix.m41, matrix.m42);\r\n}\r\n\r\nexport function getTopLeft(element: HTMLElement): Point {\r\n    return new Point(element.offsetLeft, element.offsetTop);\r\n}\r\n\r\nexport function setTranslation(element: HTMLElement | SVGElement, translation: Point): void {\r\n    element.style.transform = `translate(${translation.x}px, ${translation.y}px)`;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["graph","nodeMenu","document","getElementById","addEventListener","event","button","stopPropagation","nodeTreeView","categoryLists","key","definition","nodeDefinitions","category","parent","label","branchElement","createElement","classList","add","toggle","rowElement","arrowElement","appendChild","labelElement","textContent","childList","addTreeViewBranch","itemElement","addTreeViewListItem","name","nodePosition","viewportToAreaPoint","getTopLeft","nodes","push","Node","remove","handlers","addListener","handler","this","removeListener","filter","h","dispatch","data","slice","forEach","expose","LiteEvent","_panning","_dragging","_dragNode","_linking","_linkPin","viewport","graphArea","_drawingLink","Link","reset","onMouseDown","onMouseMove","onMouseUp","onContextMenu","beginDrag","node","position","element","style","cursor","_dragCursorBegin","_dragTargetBegin","beginLink","pin","setPoints","endLink","type","valueType","link","PinType","Output","Input","addLink","point","areaPos","getTranslation","subtract","x","y","Point","clientX","clientY","setTranslation","areaRect","getBoundingClientRect","left","top","endPoint","startPoint","preventDefault","viewportRect","nodeMenuRect","alignRight","width","searchbar","value","focus","Graph","id","posX","posY","inLinks","outLinks","index","initAddNodeMenu","i","length","nodeData","startPin","endPin","undefined","_startPin","_startPoint","_endPin","_endPoint","_element","createElementNS","_path","updatePath","setAttribute","destroy","parentElement","removeChild","breakLink","startControlX","curve","endControlX","newBounds","Rect","s","e","height","start","inputs","outputs","if","while","for","multipy","divide","and","or","not","equal","notEqual","less","lessOrEqual","greater","greaterOrEqual","_inputs","_outputs","_graph","_type","nodeDefinition","head","title","innerHTML","body","rows","Math","max","row","input","stringToValueType","inputPin","Pin","gridColumn","gridRow","toString","inputLabel","ValueType","Flow","Int","Float","String","TextValueField","Boolean","BooleanValueField","onLinksChanged","linkCount","visibility","valueField","output","outputLabel","outputPin","console","error","updateLinkPositions","getInput","links","target","contains","tick","checked","_checked","linksChangedEvent","_node","_valueType","onMouseEnter","onMouseExit","graphic","graphRect","pinRect","setGraphicSolid","indexOf","splice","solid","window","getComputedStyle","matrix","DOMMatrixReadOnly","transform","m41","m42","offsetLeft","offsetTop","translation","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}