{"version":3,"file":"script.js","mappings":"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","sources":["webpack:///./src/addNodeMenu.ts","webpack:///./src/checkbox.ts","webpack:///./src/event.ts","webpack:///./src/graph.ts","webpack:///./src/index.ts","webpack:///./src/link.ts","webpack:///./src/node.ts","webpack:///./src/nodedefinitions.ts","webpack:///./src/pin.ts","webpack:///./src/util.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["import { Graph } from \"./graph\";\r\nimport { Node } from \"./node\";\r\nimport { nodeDefinitions } from \"./nodedefinitions\";\r\nimport { getTopLeft } from \"./util\";\r\n\r\n// Generate add node menu items\r\nfunction addTreeViewBranch(parent: HTMLUListElement, label: string): HTMLUListElement {\r\n    const branchElement: HTMLLIElement = document.createElement(\"li\");\r\n    branchElement.classList.add(\"branch\");\r\n    branchElement.addEventListener(\"click\", () => branchElement.classList.toggle(\"expanded\"));\r\n    \r\n    const rowElement: HTMLDivElement = document.createElement(\"div\");\r\n    const arrowElement: HTMLSpanElement = document.createElement(\"span\");\r\n    arrowElement.classList.add(\"material-symbols-rounded\");\r\n    rowElement.appendChild(arrowElement);\r\n    const labelElement: HTMLSpanElement = document.createElement(\"span\");\r\n    labelElement.textContent = label;\r\n    rowElement.appendChild(labelElement);\r\n    branchElement.appendChild(rowElement);\r\n    \r\n    const childList: HTMLUListElement = document.createElement(\"ul\");\r\n    branchElement.appendChild(childList);\r\n    \r\n    parent.appendChild(branchElement);\r\n    return childList;\r\n}\r\n\r\nfunction addTreeViewListItem(parent: HTMLUListElement, label: string): HTMLLIElement {\r\n    const itemElement: HTMLLIElement = document.createElement(\"li\");\r\n    itemElement.classList.add(\"branch\");\r\n    \r\n    const rowElement: HTMLDivElement = document.createElement(\"div\");\r\n    const labelElement: HTMLSpanElement = document.createElement(\"span\");\r\n    labelElement.textContent = label;\r\n    rowElement.appendChild(labelElement);\r\n    itemElement.appendChild(rowElement);\r\n    \r\n    parent.appendChild(itemElement);\r\n    return itemElement;\r\n}\r\n\r\nexport function initAddNodeMenu(graph: Graph) {\r\n    const nodeMenu: HTMLElement = document.getElementById(\"node-menu\");\r\n    nodeMenu.addEventListener(\"mousedown\", event => {\r\n        if(event.button == 0)\r\n            event.stopPropagation();\r\n    });\r\n    \r\n    const nodeTreeView: HTMLUListElement = <HTMLUListElement>document.getElementById(\"node-tree-view\");\r\n    const categoryLists = {};\r\n    \r\n    for (let key in nodeDefinitions) {\r\n        const definition = nodeDefinitions[key];\r\n        if(!(definition.category in categoryLists))\r\n            categoryLists[definition.category] = addTreeViewBranch(nodeTreeView, definition.category);\r\n        \r\n        const listItem: HTMLLIElement = addTreeViewListItem(categoryLists[definition.category], definition.name);\r\n        listItem.addEventListener(\"click\", event => {\r\n            if(event.button == 0) {\r\n                event.stopPropagation();\r\n                const nodePosition = graph.viewportToAreaPoint(getTopLeft(nodeMenu));\r\n                graph.nodes.push(new Node(graph, key, nodePosition));\r\n                nodeMenu.classList.remove(\"visible\");\r\n            }\r\n        });\r\n    }\r\n}","export class CheckBox {\r\n    private checked: boolean;\r\n\r\n    element: HTMLDivElement;\r\n\r\n    constructor() {\r\n        this.element = document.createElement(\"div\");\r\n        this.element.classList.add(\"checkbox\");\r\n        const tick: HTMLSpanElement = document.createElement(\"span\");\r\n        tick.classList.add(\"material-symbols-rounded\");\r\n        tick.innerHTML = \"check\";\r\n        this.element.appendChild(tick);\r\n        this.element.addEventListener(\"click\", () => this.setChecked(!this.checked));\r\n    }\r\n\r\n    setChecked(checked: boolean) {\r\n        this.checked = checked;\r\n        this.element.setAttribute(\"checked\", `${this.checked}`);\r\n    }\r\n}","export interface ILiteEvent<T> {\r\n    addListener(handler: { (data?: T): void }) : void;\r\n    removeListener(handler: { (data?: T): void }) : void;\r\n}\r\n\r\nexport class LiteEvent<T> implements ILiteEvent<T> {\r\n    private handlers: { (data?: T): void; }[] = [];\r\n\r\n    public addListener(handler: { (data?: T): void }): void {\r\n        this.handlers.push(handler);\r\n    }\r\n\r\n    public removeListener(handler: { (data?: T): void }): void {\r\n        this.handlers = this.handlers.filter(h => h !== handler);\r\n    }\r\n\r\n    public dispatch(data?: T): void {\r\n        this.handlers.slice(0).forEach(h => h(data));\r\n    }\r\n\r\n    public expose() : ILiteEvent<T> {\r\n        return this;\r\n    }\r\n}","import { Pin, PinType } from \"./pin\";\r\nimport { Node } from \"./node\";\r\nimport { Link } from \"./link\";\r\nimport { Point, getTranslation, setTranslation } from \"./util\";\r\n\r\nexport class Graph {\r\n    viewport: HTMLElement;\r\n    graphArea: HTMLElement;\r\n    nodes: Array<Node> = [];\r\n    \r\n    private dragCursorBegin: Point;\r\n    private dragTargetBegin: Point;\r\n    \r\n    private panning: boolean = false;\r\n    private dragging: boolean = false;\r\n\r\n    private dragNode: Node = null;\r\n    \r\n    private linking: boolean = false;\r\n    private linkPin: Pin = null;\r\n    private drawingLink: Link;\r\n\r\n    constructor() {\r\n        this.viewport = document.getElementById(\"graph-viewport\");\r\n        this.graphArea = document.getElementById(\"graph-area\");\r\n        this.drawingLink = new Link();\r\n        this.drawingLink.reset();\r\n        this.viewport.addEventListener(\"mousedown\", event => this.onMouseDown(event));\r\n        this.viewport.addEventListener(\"mousemove\", event => this.onMouseMove(event));\r\n        this.viewport.addEventListener(\"mouseup\", event => this.onMouseUp(event));\r\n        this.viewport.addEventListener(\"contextmenu\", event => this.onContextMenu(event));\r\n    }\r\n\r\n    private onMouseDown(event: MouseEvent): void {\r\n        if(event.button == 0)\r\n            document.getElementById(\"node-menu\").classList.remove(\"visible\");\r\n\r\n        if(event.button == 1 && !this.dragging && !this.linking) {\r\n            this.dragTargetBegin = getTranslation(this.graphArea);\r\n            this.dragCursorBegin = new Point(event.clientX, event.clientY);\r\n            this.panning = true;\r\n        }\r\n    }\r\n\r\n    private onMouseMove(event: MouseEvent): void {\r\n        if(this.panning) {\r\n            let position: Point = new Point(\r\n                this.dragTargetBegin.x + event.clientX - this.dragCursorBegin.x,\r\n                this.dragTargetBegin.y + event.clientY - this.dragCursorBegin.y\r\n            );\r\n            setTranslation(this.graphArea, position);\r\n        }\r\n\r\n        if(this.dragging) {\r\n            let position: Point = new Point(\r\n                this.dragTargetBegin.x + event.clientX - this.dragCursorBegin.x,\r\n                this.dragTargetBegin.y + event.clientY - this.dragCursorBegin.y\r\n            );\r\n            this.dragNode.setPosition(position);\r\n        }\r\n    \r\n        if(this.linking) {\r\n            const areaRect: DOMRect = this.graphArea.getBoundingClientRect();\r\n            const position: Point = new Point(event.clientX - areaRect.left, event.clientY - areaRect.top);\r\n            switch(this.linkPin.getType()) {\r\n                case PinType.Output:\r\n                    this.drawingLink.setEndPoint(position);\r\n                    break;\r\n                case PinType.Input:\r\n                    this.drawingLink.setStartPoint(position);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onMouseUp(event: MouseEvent): void {\r\n        if(this.panning) {\r\n            this.panning = false;\r\n        }\r\n        \r\n        if(this.dragging) {\r\n            this.dragNode.element.style.cursor = null;\r\n            this.dragNode = null;\r\n            this.dragging = false;\r\n        }\r\n\r\n        if(this.linking) {\r\n            this.drawingLink.reset();\r\n            this.linking = false;\r\n        }\r\n    }\r\n\r\n    private onContextMenu(event: MouseEvent): void {\r\n        event.preventDefault();\r\n        const viewportRect: DOMRect = this.viewport.getBoundingClientRect();\r\n        const nodeMenu: HTMLElement = document.getElementById(\"node-menu\");\r\n        const nodeMenuRect: DOMRect = nodeMenu.getBoundingClientRect();\r\n        const alignRight = event.clientX > viewportRect.width / 2;\r\n        nodeMenu.style.left = `${event.clientX - viewportRect.x - (alignRight ? nodeMenuRect.width : 0)}px`;\r\n        nodeMenu.style.top = `${event.clientY - viewportRect.y}px`;\r\n        nodeMenu.classList.add(\"visible\");\r\n\r\n        const searchbar: HTMLInputElement = <HTMLInputElement>document.getElementById(\"node-search-bar\");\r\n        searchbar.value = \"\";\r\n        searchbar.focus();\r\n    }\r\n\r\n    beginDrag(node: Node, position: Point): void {\r\n        if(this.panning || this.linking)\r\n            return;\r\n\r\n        this.dragNode = node;\r\n        this.dragNode.element.style.cursor = \"grabbing\";\r\n        this.dragCursorBegin = position;\r\n        this.dragTargetBegin = this.dragNode.getPosition();\r\n        this.dragging = true;\r\n    }\r\n\r\n    beginLink(pin: Pin): void {\r\n        if(this.panning || this.dragging)\r\n            return;\r\n\r\n        this.linkPin = pin;\r\n        this.linking = true;\r\n\r\n        const position: Point = this.linkPin.getPosition();\r\n        this.drawingLink.setPoints(position, position);\r\n    }\r\n\r\n    endLink(pin: Pin): void {\r\n        if(this.linkPin != pin\r\n            && this.linkPin.getType() != pin.getType()          \r\n            && this.linkPin.getNode() != pin.getNode()\r\n            && this.linkPin.getValueType() == pin.getValueType()) {\r\n            let link: Link;\r\n            switch(this.linkPin.getType()) {\r\n                case PinType.Output:\r\n                    link = new Link(this.linkPin, pin);\r\n                    break;\r\n                case PinType.Input:\r\n                    link = new Link(pin, this.linkPin);\r\n                    break;\r\n            }                \r\n            this.linkPin.addLink(link);\r\n            pin.addLink(link);\r\n        }\r\n        this.drawingLink.reset();\r\n        this.linking = false;\r\n    }\r\n\r\n    viewportToAreaPoint(point: Point): Point {\r\n        const areaPos = getTranslation(this.graphArea);\r\n        return point.subtract(areaPos.x, areaPos.y);\r\n    }\r\n}\r\n","let nodes = [\r\n    {\r\n        id: 0,\r\n        type: \"start\",\r\n        posX: 32,\r\n        posY: 32,\r\n        inLinks: [],\r\n        outLinks: [{node: 1, index: 0}]\r\n    },\r\n    {\r\n        id: 1,\r\n        type: \"add\",\r\n        posX: 160,\r\n        posY: 32,\r\n        inLinks: [{node: 0, index: 0}, {node: null}],\r\n        outLinks: [{node: null}]\r\n    },\r\n    {\r\n        id: 2,\r\n        type: \"if\",\r\n        posX: 288,\r\n        posY: 32,\r\n        inLinks: [],\r\n        outLinks: []\r\n    }\r\n];\r\n\r\nimport { Graph } from \"./graph\";\r\nimport { Node } from \"./node\";\r\nimport { Point } from \"./util\";\r\nimport { initAddNodeMenu } from \"./addNodeMenu\";\r\n\r\n// Generate graph\r\nconst graph: Graph = new Graph();\r\ninitAddNodeMenu(graph);\r\n\r\n// Load nodes\r\nfor (let i = 0; i < nodes.length; i++) {\r\n    const nodeData = nodes[i];\r\n    graph.nodes.push(new Node(graph, nodeData.type, new Point(nodeData.posX, nodeData.posY)));\r\n}\r\n","import { Pin } from \"./pin\";\r\nimport { Point, Rect, setTranslation } from \"./util\";\r\n\r\nexport class Link {\r\n    static readonly curve : number = 32;\r\n\r\n    private startPoint: Point;\r\n    private endPoint: Point;\r\n    private element: SVGElement;\r\n    private path: SVGPathElement;\r\n    private startPin: Pin;\r\n    private endPin: Pin;\r\n\r\n    constructor(startPin?: Pin, endPin?: Pin) {      \r\n        if(startPin != undefined && startPin != null) {\r\n            this.startPin = startPin;\r\n            this.startPoint = startPin.getPosition();\r\n        }\r\n        else {\r\n            this.startPin = null;\r\n            this.startPoint = new Point();\r\n        }\r\n\r\n        if(endPin != undefined && endPin != null) {\r\n            this.endPin = endPin;\r\n            this.endPoint = endPin.getPosition();\r\n        }\r\n        else {\r\n            this.endPin = null;\r\n            this.endPoint = new Point();\r\n        }\r\n        this.element = <SVGElement>document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n        this.element.classList.add(\"graph-link\");\r\n        this.path = <SVGPathElement>document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n        this.element.appendChild(this.path);\r\n        const graphLinks: HTMLElement = document.getElementById(\"graph-links\");\r\n        graphLinks.appendChild(this.element);\r\n        this.updatePath();\r\n    }\r\n\r\n    setStartPoint(startPoint: Point): void {\r\n        this.startPoint = startPoint;\r\n        this.updatePath();\r\n    }\r\n\r\n    setEndPoint(endPoint: Point): void {\r\n        this.endPoint = endPoint;\r\n        this.updatePath();\r\n    }\r\n\r\n    setPoints(startPoint: Point, endPoint: Point): void {\r\n        this.startPoint = startPoint;\r\n        this.endPoint = endPoint;\r\n        this.updatePath();\r\n    }\r\n\r\n    reset(): void {\r\n        this.startPoint = new Point(0, 0);\r\n        this.endPoint = new Point(0, 0);\r\n        this.path.setAttribute(\"d\", \"\");\r\n    }\r\n\r\n    destroy(): void {\r\n        this.path.parentElement.removeChild(this.path);\r\n        this.startPin.breakLink(this);\r\n        this.endPin.breakLink(this);\r\n    }\r\n\r\n    private updatePath(): void {\r\n        const startControlX: number = this.startPoint.x + Link.curve;\r\n        const endControlX: number = this.endPoint.x - Link.curve;\r\n\r\n        const newBounds: Rect = new Rect();\r\n\r\n        const s: Point = new Point();\r\n        const e: Point = new Point();\r\n\r\n        if(this.startPoint.x <= endControlX) {\r\n            newBounds.x = this.startPoint.x;\r\n            newBounds.width = this.endPoint.x - this.startPoint.x;\r\n            e.x = newBounds.width;\r\n        }\r\n        else {\r\n            newBounds.x = endControlX;\r\n            newBounds.width = startControlX - endControlX;\r\n            s.x = this.startPoint.x - endControlX;\r\n            e.x = Link.curve;\r\n        }\r\n\r\n        if(this.startPoint.y <= this.endPoint.y) {\r\n            newBounds.y = this.startPoint.y - 2;\r\n            newBounds.height = this.endPoint.y - this.startPoint.y + 4;\r\n            s.y = 2;\r\n            e.y = newBounds.height - 2;\r\n        }\r\n        else {\r\n            newBounds.y = this.endPoint.y - 2;\r\n            newBounds.height = this.startPoint.y - this.endPoint.y + 4;\r\n            s.y = newBounds.height - 2;\r\n            e.y = 2;\r\n        }\r\n\r\n        setTranslation(this.element, new Point(newBounds.x, newBounds.y));\r\n        this.element.setAttribute(\"width\", `${newBounds.width}`);\r\n        this.element.setAttribute(\"height\", `${newBounds.height}`)\r\n        \r\n        this.path.setAttribute(\"d\", `M ${s.x} ${s.y} C ${s.x + Link.curve} ${s.y}, ${e.x - Link.curve} ${e.y}, ${e.x} ${e.y}`);\r\n    }\r\n}","import { Graph } from \"./graph\";\r\nimport { Pin, PinType, ValueType } from \"./pin\";\r\nimport { nodeDefinitions } from \"./nodedefinitions\";\r\nimport { CheckBox } from \"./checkbox\";\r\nimport { Point, getTranslation, setTranslation } from \"./util\";\r\n\r\nexport class Node {\r\n    private static currentID = 0;\r\n\r\n    private id: number;\r\n\r\n    // UI Elements\r\n    element : HTMLDivElement;\r\n    private inputs: Array<Pin> = [];\r\n    private outputs: Array<Pin> = [];\r\n\r\n    private graph: Graph;\r\n\r\n    constructor(graph: Graph, type: string, position: Point) {\r\n        this.id = Node.currentID++;\r\n        this.graph = graph;\r\n\r\n        const nodeDefinition = nodeDefinitions[type];\r\n    \r\n        // Node\r\n        this.element = document.createElement(\"div\");\r\n        this.element.addEventListener(\"mousedown\", event => this.onMouseDown(event));\r\n        this.element.classList.add(\"graph-node\");\r\n    \r\n        // Head\r\n        const head: HTMLDivElement = document.createElement(\"div\");\r\n        head.classList.add(\"head\");\r\n        const title: HTMLSpanElement = document.createElement(\"span\");\r\n        title.innerHTML = nodeDefinition.name;\r\n        head.appendChild(title);\r\n        this.element.appendChild(head);\r\n\r\n        // Body\r\n        const body: HTMLDivElement = document.createElement(\"div\");\r\n        body.classList.add(\"body\");\r\n        this.element.appendChild(body);\r\n    \r\n        // Rows\r\n        let rows = Math.max(nodeDefinition.inputs.length, nodeDefinition.outputs.length);\r\n        for (let i = 0; i < rows; i++) {\r\n            const row: number = i + 1;\r\n\r\n            if(i < nodeDefinition.inputs.length) {\r\n                const input = nodeDefinition.inputs[i];\r\n                const valueType: ValueType = stringToValueType(input.type);\r\n\r\n                let inputPin: Pin = new Pin(this.graph, this, valueType, PinType.Input);\r\n                inputPin.element.style.gridColumn = \"1\";\r\n                inputPin.element.style.gridRow = row.toString();\r\n                this.inputs.push(inputPin);\r\n                body.appendChild(inputPin.element);\r\n                \r\n                const inputLabel: HTMLSpanElement = document.createElement(\"span\");\r\n                inputLabel.innerHTML = input.name;\r\n                inputLabel.style.gridColumn = \"2\";\r\n                inputLabel.style.gridRow = row.toString();\r\n                body.appendChild(inputLabel);\r\n                \r\n                if(valueType & (ValueType.Int | ValueType.Float | ValueType.String)) {\r\n                    const inputField: HTMLSpanElement = document.createElement(\"span\");\r\n                    inputField.classList.add(\"input\");\r\n                    inputField.setAttribute(\"role\", \"textbox\");\r\n                    inputField.setAttribute(\"contenteditable\", \"true\");\r\n                    inputField.style.gridColumn = \"3\";\r\n                    inputField.style.gridRow = row.toString();\r\n                    body.appendChild(inputField);\r\n\r\n                    inputPin.onLinksChanged.addListener((linkCount: number) => {\r\n                        inputField.style.visibility = linkCount > 0 ? \"hidden\" : \"visible\";\r\n                    });\r\n                }\r\n                else if(valueType == ValueType.Boolean) {\r\n                    const inputCheck: CheckBox = new CheckBox();\r\n                    inputCheck.element.style.gridColumn = \"3\";\r\n                    inputCheck.element.style.gridRow = row.toString();\r\n                    body.appendChild(inputCheck.element);\r\n\r\n                    inputPin.onLinksChanged.addListener((linkCount: number) => {\r\n                        inputCheck.element.style.visibility = linkCount > 0 ? \"hidden\" : \"visible\";\r\n                    });\r\n                }\r\n                /* Enum\r\n                else if(valueType == ValueType.Boolean) {\r\n                    const inputSelect: HTMLSelectElement = document.createElement(\"select\");\r\n                    const trueOption = document.createElement(\"option\");\r\n                    trueOption.innerHTML = \"True\";\r\n                    inputSelect.options.add(trueOption);\r\n                    const falseOption = document.createElement(\"option\");\r\n                    falseOption.innerHTML = \"False\";\r\n                    inputSelect.options.add(falseOption);\r\n                    inputSelect.style.gridColumn = \"3\";\r\n                    inputSelect.style.gridRow = row.toString();\r\n                    body.appendChild(inputSelect);\r\n\r\n                    inputPin.onLinksChanged.addListener((linkCount: number) => {\r\n                        inputSelect.style.visibility = linkCount > 0 ? \"hidden\" : \"visible\";\r\n                    });\r\n                }*/\r\n            }\r\n    \r\n            if(i < nodeDefinition.outputs.length) {\r\n                const output = nodeDefinition.outputs[i];\r\n                const valueType: ValueType = stringToValueType(output.type);\r\n\r\n                const outputLabel: HTMLSpanElement = document.createElement(\"span\");\r\n                outputLabel.classList.add(\"text-right\");\r\n                outputLabel.innerHTML = output.name;\r\n                outputLabel.style.gridColumn = \"5\";\r\n                outputLabel.style.gridRow = row.toString();\r\n                body.appendChild(outputLabel);\r\n\r\n                const outputPin = new Pin(this.graph, this, valueType);\r\n                outputPin.element.style.gridColumn = \"6\";\r\n                outputPin.element.style.gridRow = row.toString();\r\n                this.outputs.push(outputPin);\r\n                body.appendChild(outputPin.element);\r\n            }\r\n        }\r\n        const graphNodes = document.getElementById(\"graph-nodes\");\r\n        graphNodes.appendChild(this.element);\r\n\r\n        this.setPosition(position);\r\n    }\r\n\r\n    getPosition(): Point {\r\n        return getTranslation(this.element);\r\n    }\r\n\r\n    setPosition(position: Point): void {\r\n        setTranslation(this.element, position);\r\n        this.inputs.forEach(input => input.updateLinkPositions());\r\n        this.outputs.forEach(output => output.updateLinkPositions());\r\n    }\r\n\r\n    private onMouseDown(event: MouseEvent): void {\r\n        if(!(<Element>event.target).classList.contains(\"graph-node\"))\r\n            return; \r\n        \r\n        if(event.button == 0) {\r\n            event.preventDefault();\r\n\r\n            const position: Point = new Point(event.clientX, event.clientY);\r\n            this.graph.beginDrag(this, position);\r\n        }\r\n    }\r\n}\r\n\r\nfunction stringToValueType(valueType: string): ValueType {\r\n    switch(valueType) {\r\n        case \"Flow\": return ValueType.Flow;\r\n        case \"Int\": return ValueType.Int;\r\n        case \"Float\": return ValueType.Float;\r\n        case \"String\": return ValueType.String;\r\n        case \"Boolean\": return ValueType.Boolean;\r\n        default: return ValueType.Flow;\r\n    }\r\n}","export const nodeDefinitions = {\r\n    start: {\r\n        name: \"Start\",\r\n        category: \"Flow\",\r\n        inputs: [],\r\n        outputs: [{name: \"\", type: \"Flow\"}]\r\n    },\r\n    if: {\r\n        name: \"If\",\r\n        category: \"Flow\",\r\n        inputs: [{ name: \"\", type: \"Flow\"}, { name: \"Condition\", type: \"Boolean\"}],\r\n        outputs: [{ name: \"True\", type: \"Flow\"}, { name: \"False\", type: \"Flow\"}]\r\n    },\r\n    add: {\r\n        name: \"Add\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n    subtract: {\r\n        name: \"Subtract\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n    multipy: {\r\n        name: \"Multiply\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n    divide: {\r\n        name: \"Divide\",\r\n        category: \"Math\",\r\n        inputs: [{name: \"A\", type: \"Int\"}, {name: \"B\", type: \"Int\"}],\r\n        outputs: [{name: \"\", type: \"Int\"}]\r\n    },\r\n};","import { Link } from \"./link\";\r\nimport { Graph } from \"./graph\";\r\nimport { Node } from \"./node\";\r\nimport { ILiteEvent, LiteEvent } from \"./event\";\r\nimport { Point } from \"./util\";\r\n\r\nexport enum PinType {\r\n    Output,\r\n    Input\r\n}\r\n\r\nexport enum ValueType {\r\n    Flow = 1,\r\n    Int = 2,\r\n    Float = 4,\r\n    String = 8,\r\n    Boolean = 16\r\n}\r\n\r\nexport class Pin {\r\n    private type: PinType = PinType.Output;\r\n    private valueType: ValueType;\r\n    private links: Array<Link> = [];\r\n\r\n    private graph: Graph;\r\n    private node: Node;\r\n\r\n    public element: HTMLDivElement;\r\n    private graphic: HTMLDivElement;\r\n\r\n    private readonly linksChangedEvent = new LiteEvent<number>();\r\n\r\n    constructor(graph: Graph, node: Node, valueType: ValueType, type: PinType = PinType.Output) {\r\n        this.graph = graph;\r\n        this.node = node;\r\n        this.type = type;\r\n        this.valueType = valueType;\r\n\r\n        this.element = document.createElement(\"div\");\r\n        this.element.classList.add(\"pin\");\r\n        if(this.type == PinType.Output)\r\n            this.element.classList.add(\"right\");\r\n\r\n        this.element.addEventListener(\"mousedown\", event => this.onMouseDown(event));\r\n        this.element.addEventListener(\"mouseup\", event => this.onMouseUp(event));\r\n        this.element.addEventListener(\"mouseenter\", event => this.onMouseEnter(event));\r\n        this.element.addEventListener(\"mouseleave\", event => this.onMouseExit(event))\r\n        this.element.addEventListener(\"contextmenu\", event => event.preventDefault());\r\n\r\n        this.graphic = document.createElement(\"div\");\r\n        this.graphic.classList.add(\"pin-graphic\");\r\n        switch(this.valueType) {\r\n            case ValueType.Flow: this.graphic.classList.add(\"type-flow\"); break;\r\n            case ValueType.Int: this.graphic.classList.add(\"type-int\"); break;\r\n            case ValueType.Float: this.graphic.classList.add(\"type-float\"); break;\r\n            case ValueType.String: this.graphic.classList.add(\"type-string\"); break;\r\n            case ValueType.Boolean: this.graphic.classList.add(\"type-boolean\"); break;\r\n        }\r\n\r\n        this.element.appendChild(this.graphic);\r\n    }\r\n\r\n    getType(): PinType { return this.type; }\r\n    getValueType(): ValueType { return this.valueType; }\r\n    getNode(): Node { return this.node; }\r\n\r\n    get onLinksChanged(): ILiteEvent<number> { return this.linksChangedEvent.expose(); }\r\n\r\n    getPosition(): Point {\r\n        const graphRect: DOMRect = this.graph.graphArea.getBoundingClientRect();\r\n        const pinRect: DOMRect = this.element.getBoundingClientRect();\r\n        return new Point(\r\n            pinRect.left + pinRect.width / 2 - graphRect.left,\r\n            pinRect.top + pinRect.height / 2 - graphRect.top);\r\n    }\r\n\r\n    addLink(link: Link): void {\r\n        this.links.push(link);\r\n        this.setGraphicSolid(true);\r\n        this.linksChangedEvent.dispatch(this.links.length);\r\n    }\r\n\r\n    breakLink(link: Link): void {\r\n        let index: number = this.links.indexOf(link);\r\n        if(index > -1)\r\n            this.links.splice(index, 1);\r\n        if(this.links.length <= 0)\r\n            this.setGraphicSolid(false);\r\n        this.linksChangedEvent.dispatch(this.links.length);\r\n    }\r\n\r\n    private setGraphicSolid(solid: boolean): void {\r\n        if(solid)\r\n            this.element.classList.add(\"solid\");\r\n        else\r\n            this.element.classList.remove(\"solid\");\r\n    }\r\n\r\n    private onMouseDown(event: MouseEvent): void {\r\n        if(!(<Element>event.target).classList.contains(\"pin\"))\r\n            return;\r\n\r\n        if(event.button == 0) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this.graph.beginLink(this);\r\n        }\r\n        else if(event.button == 2) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            const linkCount: number = this.links.length;\r\n            for (let i = 0; i < linkCount; i++)\r\n                this.links[0].destroy();     \r\n        }\r\n    }\r\n\r\n    private onMouseUp(event: MouseEvent): void {\r\n        if(!(<Element>event.target).classList.contains(\"pin\"))\r\n            return;\r\n\r\n        if(event.button == 0)\r\n            this.graph.endLink(this);\r\n    }\r\n\r\n    private onMouseEnter(event: MouseEvent): void {\r\n        this.setGraphicSolid(true);\r\n    }\r\n\r\n    private onMouseExit(event: MouseEvent): void {\r\n        if(this.links.length <= 0)\r\n            this.setGraphicSolid(false);\r\n    }\r\n\r\n    updateLinkPositions(): void {\r\n        switch(this.type) {\r\n            case PinType.Output:\r\n                this.links.forEach(link => link.setStartPoint(this.getPosition()));\r\n                break;\r\n            case PinType.Input:\r\n                this.links.forEach(link => link.setEndPoint(this.getPosition()));\r\n                break;\r\n        }\r\n    }\r\n}","export class Point {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x?: number, y?: number) {\r\n        this.x = x ?? 0;\r\n        this.y = y ?? 0;\r\n    }\r\n\r\n    add(x: number, y: number): Point {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n    subtract(x: number, y: number): Point {\r\n        this.x -= x;\r\n        this.y -= y;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class Rect {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(x?: number, y?: number, width?: number, height?: number) {\r\n        this.x = x ?? 0;\r\n        this.y = y ?? 0;\r\n        this.width = width ?? 0;\r\n        this.height = height ?? 0;\r\n    }\r\n}\r\n\r\nfunction roundMultiple(value: number, multiple: number): number {\r\n    return Math.round(value / multiple) * multiple;\r\n}\r\n\r\nfunction ceilMultiple(value: number, multiple: number): number {\r\n    return Math.ceil(value / multiple) * multiple;\r\n}\r\n\r\nexport function getTranslation(element: HTMLElement): Point {\r\n    const style: CSSStyleDeclaration = window.getComputedStyle(element);\r\n    const matrix: DOMMatrixReadOnly = new DOMMatrixReadOnly(style.transform);\r\n    return new Point(matrix.m41, matrix.m42);\r\n}\r\n\r\nexport function getTopLeft(element: HTMLElement): Point {\r\n    return new Point(element.offsetLeft, element.offsetTop);\r\n}\r\n\r\nexport function setTranslation(element: HTMLElement | SVGElement, translation: Point): void {\r\n    element.style.transform = `translate(${translation.x}px, ${translation.y}px)`;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["graph","nodeMenu","document","getElementById","addEventListener","event","button","stopPropagation","nodeTreeView","categoryLists","key","definition","nodeDefinitions","category","parent","label","branchElement","createElement","classList","add","toggle","rowElement","arrowElement","appendChild","labelElement","textContent","childList","addTreeViewBranch","itemElement","addTreeViewListItem","name","nodePosition","viewportToAreaPoint","getTopLeft","nodes","push","Node","remove","this","element","tick","innerHTML","setChecked","checked","setAttribute","CheckBox","handlers","addListener","handler","removeListener","filter","h","dispatch","data","slice","forEach","expose","LiteEvent","panning","dragging","dragNode","linking","linkPin","viewport","graphArea","drawingLink","Link","reset","onMouseDown","onMouseMove","onMouseUp","onContextMenu","dragTargetBegin","getTranslation","dragCursorBegin","Point","clientX","clientY","position","x","y","setTranslation","setPosition","areaRect","getBoundingClientRect","left","top","getType","PinType","Output","setEndPoint","Input","setStartPoint","style","cursor","preventDefault","viewportRect","nodeMenuRect","alignRight","width","searchbar","value","focus","beginDrag","node","getPosition","beginLink","pin","setPoints","endLink","getNode","getValueType","link","addLink","point","areaPos","subtract","Graph","id","type","posX","posY","inLinks","outLinks","index","initAddNodeMenu","i","length","nodeData","startPin","endPin","undefined","startPoint","endPoint","createElementNS","path","updatePath","destroy","parentElement","removeChild","breakLink","startControlX","curve","endControlX","newBounds","Rect","s","e","height","inputs","outputs","currentID","nodeDefinition","head","title","body","rows","Math","max","row","input","valueType","stringToValueType","inputPin","Pin","gridColumn","gridRow","toString","inputLabel","ValueType","Int","Float","String","onLinksChanged","linkCount","visibility","Boolean","output","outputLabel","outputPin","updateLinkPositions","target","contains","Flow","start","if","multipy","divide","links","linksChangedEvent","onMouseEnter","onMouseExit","graphic","graphRect","pinRect","setGraphicSolid","indexOf","splice","solid","window","getComputedStyle","matrix","DOMMatrixReadOnly","transform","m41","m42","offsetLeft","offsetTop","translation","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}